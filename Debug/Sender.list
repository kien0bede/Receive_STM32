
Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005990  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e0  080062e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e8  080062e8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080062f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000068  08006358  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  08006358  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   000126ed  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029cb  00000000  00000000  000327c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  00035190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebc  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001920d  00000000  00000000  000372fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016074  00000000  00000000  00050509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fbd6  00000000  00000000  0006657d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054fc  00000000  00000000  000f6154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000fb650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a88 	.word	0x08005a88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005a88 	.word	0x08005a88

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	78fa      	ldrb	r2, [r7, #3]
 8000462:	4611      	mov	r1, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fbd0 	bl	8000c0a <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fbeb 	bl	8000c4a <SX1278_hw_SPIReadByte>
 8000474:	4603      	mov	r3, r0
 8000476:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fb88 	bl	8000b94 <SX1278_hw_SetNSS>
	return tmp;
 8000484:	7bfb      	ldrb	r3, [r7, #15]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	70fb      	strb	r3, [r7, #3]
 800049a:	4613      	mov	r3, r2
 800049c:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fb75 	bl	8000b94 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	4610      	mov	r0, r2
 80004ba:	f000 fba6 	bl	8000c0a <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	78ba      	ldrb	r2, [r7, #2]
 80004c4:	4611      	mov	r1, r2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fb9f 	bl	8000c0a <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fb5e 	bl	8000b94 <SX1278_hw_SetNSS>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	607a      	str	r2, [r7, #4]
 80004ea:	461a      	mov	r2, r3
 80004ec:	460b      	mov	r3, r1
 80004ee:	72fb      	strb	r3, [r7, #11]
 80004f0:	4613      	mov	r3, r2
 80004f2:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004f4:	7abb      	ldrb	r3, [r7, #10]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d927      	bls.n	800054a <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fb47 	bl	8000b94 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	7afa      	ldrb	r2, [r7, #11]
 800050c:	4611      	mov	r1, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fb7b 	bl	8000c0a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000514:	2300      	movs	r3, #0
 8000516:	75fb      	strb	r3, [r7, #23]
 8000518:	e00c      	b.n	8000534 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	7dfb      	ldrb	r3, [r7, #23]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	18d4      	adds	r4, r2, r3
 8000524:	4608      	mov	r0, r1
 8000526:	f000 fb90 	bl	8000c4a <SX1278_hw_SPIReadByte>
 800052a:	4603      	mov	r3, r0
 800052c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800052e:	7dfb      	ldrb	r3, [r7, #23]
 8000530:	3301      	adds	r3, #1
 8000532:	75fb      	strb	r3, [r7, #23]
 8000534:	7dfa      	ldrb	r2, [r7, #23]
 8000536:	7abb      	ldrb	r3, [r7, #10]
 8000538:	429a      	cmp	r2, r3
 800053a:	d3ee      	bcc.n	800051a <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2101      	movs	r1, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fb26 	bl	8000b94 <SX1278_hw_SetNSS>
 8000548:	e000      	b.n	800054c <SX1278_SPIBurstRead+0x6c>
		return;
 800054a:	bf00      	nop
	}
}
 800054c:	371c      	adds	r7, #28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd90      	pop	{r4, r7, pc}

08000552 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	461a      	mov	r2, r3
 800055e:	460b      	mov	r3, r1
 8000560:	72fb      	strb	r3, [r7, #11]
 8000562:	4613      	mov	r3, r2
 8000564:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000566:	7abb      	ldrb	r3, [r7, #10]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d929      	bls.n	80005c0 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fb0e 	bl	8000b94 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4619      	mov	r1, r3
 8000586:	4610      	mov	r0, r2
 8000588:	f000 fb3f 	bl	8000c0a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800058c:	2300      	movs	r3, #0
 800058e:	75fb      	strb	r3, [r7, #23]
 8000590:	e00b      	b.n	80005aa <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	f000 fb33 	bl	8000c0a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	3301      	adds	r3, #1
 80005a8:	75fb      	strb	r3, [r7, #23]
 80005aa:	7dfa      	ldrb	r2, [r7, #23]
 80005ac:	7abb      	ldrb	r3, [r7, #10]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3ef      	bcc.n	8000592 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2101      	movs	r1, #1
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 faeb 	bl	8000b94 <SX1278_hw_SetNSS>
 80005be:	e000      	b.n	80005c2 <SX1278_SPIBurstWrite+0x70>
		return;
 80005c0:	bf00      	nop
	}
}
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f90d 	bl	80007f0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 fb5d 	bl	8000c96 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f917 	bl	8000810 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005e8:	f04f 0000 	mov.w	r0, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	04d9      	lsls	r1, r3, #19
 80005f2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005f6:	04d0      	lsls	r0, r2, #19
 80005f8:	4a6f      	ldr	r2, [pc, #444]	; (80007b8 <SX1278_config+0x1f0>)
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	f7ff fda7 	bl	8000150 <__aeabi_uldivmod>
 8000602:	4602      	mov	r2, r0
 8000604:	460b      	mov	r3, r1
 8000606:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800060a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	0c02      	lsrs	r2, r0, #16
 8000618:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	b2d3      	uxtb	r3, r2
 8000620:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000626:	f04f 0200 	mov.w	r2, #0
 800062a:	f04f 0300 	mov.w	r3, #0
 800062e:	0a02      	lsrs	r2, r0, #8
 8000630:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000634:	0a0b      	lsrs	r3, r1, #8
 8000636:	b2d3      	uxtb	r3, r2
 8000638:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800063a:	7c3b      	ldrb	r3, [r7, #16]
 800063c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800063e:	f107 020c 	add.w	r2, r7, #12
 8000642:	2303      	movs	r3, #3
 8000644:	2106      	movs	r1, #6
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ff83 	bl	8000552 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800064c:	2234      	movs	r2, #52	; 0x34
 800064e:	2139      	movs	r1, #57	; 0x39
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff1c 	bl	800048e <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7c1b      	ldrb	r3, [r3, #16]
 800065a:	461a      	mov	r2, r3
 800065c:	4b57      	ldr	r3, [pc, #348]	; (80007bc <SX1278_config+0x1f4>)
 800065e:	5c9b      	ldrb	r3, [r3, r2]
 8000660:	461a      	mov	r2, r3
 8000662:	2109      	movs	r1, #9
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff12 	bl	800048e <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800066a:	220b      	movs	r2, #11
 800066c:	210b      	movs	r1, #11
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff0d 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000674:	2223      	movs	r2, #35	; 0x23
 8000676:	210c      	movs	r1, #12
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff08 	bl	800048e <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7c5b      	ldrb	r3, [r3, #17]
 8000682:	461a      	mov	r2, r3
 8000684:	4b4e      	ldr	r3, [pc, #312]	; (80007c0 <SX1278_config+0x1f8>)
 8000686:	5c9b      	ldrb	r3, [r3, r2]
 8000688:	2b06      	cmp	r3, #6
 800068a:	d147      	bne.n	800071c <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	7c9b      	ldrb	r3, [r3, #18]
 8000690:	461a      	mov	r2, r3
 8000692:	4b4c      	ldr	r3, [pc, #304]	; (80007c4 <SX1278_config+0x1fc>)
 8000694:	5c9b      	ldrb	r3, [r3, r2]
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7cdb      	ldrb	r3, [r3, #19]
 800069e:	4619      	mov	r1, r3
 80006a0:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <SX1278_config+0x200>)
 80006a2:	5c5b      	ldrb	r3, [r3, r1]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4413      	add	r3, r2
 80006aa:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	211d      	movs	r1, #29
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff feea 	bl	800048e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7c5b      	ldrb	r3, [r3, #17]
 80006be:	461a      	mov	r2, r3
 80006c0:	4b3f      	ldr	r3, [pc, #252]	; (80007c0 <SX1278_config+0x1f8>)
 80006c2:	5c9b      	ldrb	r3, [r3, r2]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7d1b      	ldrb	r3, [r3, #20]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <SX1278_config+0x204>)
 80006d0:	5c5b      	ldrb	r3, [r3, r1]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4413      	add	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006da:	3303      	adds	r3, #3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	211e      	movs	r1, #30
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fed3 	bl	800048e <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006e8:	2131      	movs	r1, #49	; 0x31
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff feb0 	bl	8000450 <SX1278_SPIRead>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	f023 0307 	bic.w	r3, r3, #7
 80006fa:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	f043 0305 	orr.w	r3, r3, #5
 8000702:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	461a      	mov	r2, r3
 8000708:	2131      	movs	r1, #49	; 0x31
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff febf 	bl	800048e <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000710:	220c      	movs	r2, #12
 8000712:	2137      	movs	r1, #55	; 0x37
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff feba 	bl	800048e <SX1278_SPIWrite>
 800071a:	e029      	b.n	8000770 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7c9b      	ldrb	r3, [r3, #18]
 8000720:	461a      	mov	r2, r3
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SX1278_config+0x1fc>)
 8000724:	5c9b      	ldrb	r3, [r3, r2]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7cdb      	ldrb	r3, [r3, #19]
 800072e:	4619      	mov	r1, r3
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SX1278_config+0x200>)
 8000732:	5c5b      	ldrb	r3, [r3, r1]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000738:	4413      	add	r3, r2
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	211d      	movs	r1, #29
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fea4 	bl	800048e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7c5b      	ldrb	r3, [r3, #17]
 800074a:	461a      	mov	r2, r3
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <SX1278_config+0x1f8>)
 800074e:	5c9b      	ldrb	r3, [r3, r2]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7d1b      	ldrb	r3, [r3, #20]
 8000758:	4619      	mov	r1, r3
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <SX1278_config+0x204>)
 800075c:	5c5b      	ldrb	r3, [r3, r1]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000762:	4413      	add	r3, r2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	211e      	movs	r1, #30
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fe8f 	bl	800048e <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000770:	2204      	movs	r2, #4
 8000772:	2126      	movs	r1, #38	; 0x26
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe8a 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800077a:	2208      	movs	r2, #8
 800077c:	211f      	movs	r1, #31
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe85 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000784:	2200      	movs	r2, #0
 8000786:	2120      	movs	r1, #32
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fe80 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800078e:	2208      	movs	r2, #8
 8000790:	2121      	movs	r1, #33	; 0x21
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fe7b 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000798:	2201      	movs	r2, #1
 800079a:	2141      	movs	r1, #65	; 0x41
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff fe76 	bl	800048e <SX1278_SPIWrite>
	module->readBytes = 0;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 f810 	bl	80007d0 <SX1278_standby>
}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	01e84800 	.word	0x01e84800
 80007bc:	08005af4 	.word	0x08005af4
 80007c0:	08005af8 	.word	0x08005af8
 80007c4:	08005b00 	.word	0x08005b00
 80007c8:	08005b0c 	.word	0x08005b0c
 80007cc:	08005b10 	.word	0x08005b10

080007d0 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007d8:	2209      	movs	r2, #9
 80007da:	2101      	movs	r1, #1
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff fe56 	bl	800048e <SX1278_SPIWrite>
	module->status = STANDBY;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2201      	movs	r2, #1
 80007e6:	759a      	strb	r2, [r3, #22]
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80007f8:	2208      	movs	r2, #8
 80007fa:	2101      	movs	r1, #1
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fe46 	bl	800048e <SX1278_SPIWrite>
	module->status = SLEEP;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	759a      	strb	r2, [r3, #22]
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000818:	2288      	movs	r2, #136	; 0x88
 800081a:	2101      	movs	r1, #1
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff fe36 	bl	800048e <SX1278_SPIWrite>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	2112      	movs	r1, #18
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fe29 	bl	800048e <SX1278_SPIWrite>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	460b      	mov	r3, r1
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	7afa      	ldrb	r2, [r7, #11]
 8000856:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff feb5 	bl	80005c8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800085e:	2284      	movs	r2, #132	; 0x84
 8000860:	214d      	movs	r1, #77	; 0x4d
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f7ff fe13 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	2124      	movs	r1, #36	; 0x24
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff fe0e 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000872:	2201      	movs	r2, #1
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f7ff fe09 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800087c:	223f      	movs	r2, #63	; 0x3f
 800087e:	2111      	movs	r1, #17
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff fe04 	bl	800048e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff ffcf 	bl	800082a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800088c:	7afb      	ldrb	r3, [r7, #11]
 800088e:	461a      	mov	r2, r3
 8000890:	2122      	movs	r1, #34	; 0x22
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f7ff fdfb 	bl	800048e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000898:	210f      	movs	r1, #15
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fdd8 	bl	8000450 <SX1278_SPIRead>
 80008a0:	4603      	mov	r3, r0
 80008a2:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	461a      	mov	r2, r3
 80008a8:	210d      	movs	r1, #13
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff fdef 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80008b0:	228d      	movs	r2, #141	; 0x8d
 80008b2:	2101      	movs	r1, #1
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff fdea 	bl	800048e <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008c2:	2118      	movs	r1, #24
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fdc3 	bl	8000450 <SX1278_SPIRead>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d104      	bne.n	80008de <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2203      	movs	r2, #3
 80008d8:	759a      	strb	r2, [r3, #22]
			return 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	e013      	b.n	8000906 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d109      	bne.n	80008fe <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f967 	bl	8000bc2 <SX1278_hw_Reset>
			SX1278_config(module);
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fe67 	bl	80005c8 <SX1278_config>
			return 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e003      	b.n	8000906 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 f9c9 	bl	8000c96 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000904:	e7dd      	b.n	80008c2 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f9c6 	bl	8000cac <SX1278_hw_GetDIO0>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d030      	beq.n	8000988 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3317      	adds	r3, #23
 800092a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 fc17 	bl	8005164 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000936:	2110      	movs	r1, #16
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fd89 	bl	8000450 <SX1278_SPIRead>
 800093e:	4603      	mov	r3, r0
 8000940:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	461a      	mov	r2, r3
 8000946:	210d      	movs	r1, #13
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fda0 	bl	800048e <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7c5b      	ldrb	r3, [r3, #17]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7d5b      	ldrb	r3, [r3, #21]
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e005      	b.n	800096a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800095e:	2113      	movs	r1, #19
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fd75 	bl	8000450 <SX1278_SPIRead>
 8000966:	4603      	mov	r3, r0
 8000968:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f103 0217 	add.w	r2, r3, #23
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	2100      	movs	r1, #0
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fdb3 	bl	80004e0 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7bfa      	ldrb	r2, [r7, #15]
 800097e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff51 	bl	800082a <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	460b      	mov	r3, r1
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	7afa      	ldrb	r2, [r7, #11]
 80009a8:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fe0c 	bl	80005c8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80009b0:	2287      	movs	r2, #135	; 0x87
 80009b2:	214d      	movs	r1, #77	; 0x4d
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fd6a 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009ba:	2200      	movs	r2, #0
 80009bc:	2124      	movs	r1, #36	; 0x24
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f7ff fd65 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009c4:	2241      	movs	r2, #65	; 0x41
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fd60 	bl	800048e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f7ff ff2b 	bl	800082a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009d4:	22f7      	movs	r2, #247	; 0xf7
 80009d6:	2111      	movs	r1, #17
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fd58 	bl	800048e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	461a      	mov	r2, r3
 80009e2:	2122      	movs	r1, #34	; 0x22
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fd52 	bl	800048e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009ea:	210e      	movs	r1, #14
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff fd2f 	bl	8000450 <SX1278_SPIRead>
 80009f2:	4603      	mov	r3, r0
 80009f4:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
 80009f8:	461a      	mov	r2, r3
 80009fa:	210d      	movs	r1, #13
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fd46 	bl	800048e <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000a02:	2122      	movs	r1, #34	; 0x22
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff fd23 	bl	8000450 <SX1278_SPIRead>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000a0e:	7dba      	ldrb	r2, [r7, #22]
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d104      	bne.n	8000a20 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2202      	movs	r2, #2
 8000a1a:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e00e      	b.n	8000a3e <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1ea      	bne.n	8000a02 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f8c6 	bl	8000bc2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff fdc6 	bl	80005c8 <SX1278_config>
			return 0;
 8000a3c:	2300      	movs	r3, #0
		}
	}
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4613      	mov	r3, r2
 8000a54:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f7ff fd78 	bl	8000552 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a62:	228b      	movs	r2, #139	; 0x8b
 8000a64:	2101      	movs	r1, #1
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f7ff fd11 	bl	800048e <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f91b 	bl	8000cac <SX1278_hw_GetDIO0>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00b      	beq.n	8000a94 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a7c:	2112      	movs	r1, #18
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff fce6 	bl	8000450 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f7ff fed0 	bl	800082a <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f7ff fea0 	bl	80007d0 <SX1278_standby>
			return 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e013      	b.n	8000abc <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d109      	bne.n	8000ab4 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f88c 	bl	8000bc2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff fd8c 	bl	80005c8 <SX1278_config>
			return 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e003      	b.n	8000abc <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 f8ee 	bl	8000c96 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000aba:	e7d7      	b.n	8000a6c <SX1278_LoRaTxPacket+0x26>
	}
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f848 	bl	8000b6a <SX1278_hw_init>
	module->frequency = frequency;
 8000ada:	68f9      	ldr	r1, [r7, #12]
 8000adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ae0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	7e3a      	ldrb	r2, [r7, #24]
 8000ae8:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	7f3a      	ldrb	r2, [r7, #28]
 8000aee:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000af6:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000afe:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b06:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b0e:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f7ff fd59 	bl	80005c8 <SX1278_config>
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d003      	beq.n	8000b40 <SX1278_read+0x22>
		length = module->readBytes;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b3e:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3317      	adds	r3, #23
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	4619      	mov	r1, r3
 8000b48:	68b8      	ldr	r0, [r7, #8]
 8000b4a:	f004 fb3f 	bl	80051cc <memcpy>
	rxBuf[length] = '\0';
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	4413      	add	r3, r2
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b72:	2101      	movs	r1, #1
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f80d 	bl	8000b94 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6858      	ldr	r0, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	2201      	movs	r2, #1
 8000b86:	4619      	mov	r1, r3
 8000b88:	f001 fcc5 	bl	8002516 <HAL_GPIO_WritePin>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6958      	ldr	r0, [r3, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	b299      	uxth	r1, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f001 fcae 	bl	8002516 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bca:	2101      	movs	r1, #1
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ffe1 	bl	8000b94 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6858      	ldr	r0, [r3, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4619      	mov	r1, r3
 8000be0:	f001 fc99 	bl	8002516 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 f856 	bl	8000c96 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6858      	ldr	r0, [r3, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f001 fc8d 	bl	8002516 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000bfc:	2064      	movs	r0, #100	; 0x64
 8000bfe:	f000 f84a 	bl	8000c96 <SX1278_hw_DelayMs>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ffbb 	bl	8000b94 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6998      	ldr	r0, [r3, #24]
 8000c22:	1cf9      	adds	r1, r7, #3
 8000c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f002 feeb 	bl	8003a04 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c2e:	bf00      	nop
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 f9d8 	bl	8003fea <HAL_SPI_GetState>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d1f7      	bne.n	8000c30 <SX1278_hw_SPICommand+0x26>
		;
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af02      	add	r7, sp, #8
 8000c50:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff99 	bl	8000b94 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6998      	ldr	r0, [r3, #24]
 8000c66:	f107 020e 	add.w	r2, r7, #14
 8000c6a:	f107 010f 	add.w	r1, r7, #15
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	f003 f808 	bl	8003c8a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c7a:	bf00      	nop
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 f9b2 	bl	8003fea <HAL_SPI_GetState>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d1f7      	bne.n	8000c7c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f001 f8ba 	bl	8001e18 <HAL_Delay>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	f001 fc11 	bl	80024e8 <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	bf0c      	ite	eq
 8000ccc:	2301      	moveq	r3, #1
 8000cce:	2300      	movne	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	0000      	movs	r0, r0
 8000cdc:	0000      	movs	r0, r0
	...

08000ce0 <main>:
uint8_t Temp,Humi;
uint16_t Flame,MQ2;
uint8_t ON,ONMQ2;

int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af06      	add	r7, sp, #24
  HAL_Init();
 8000ce6:	f001 f835 	bl	8001d54 <HAL_Init>

  SystemClock_Config();
 8000cea:	f000 f9e5 	bl	80010b8 <SystemClock_Config>

  MX_GPIO_Init();
 8000cee:	f000 fb07 	bl	8001300 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cf2:	f000 fa8b 	bl	800120c <MX_TIM1_Init>
  MX_SPI1_Init();
 8000cf6:	f000 fa53 	bl	80011a0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000cfa:	f000 fa23 	bl	8001144 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000cfe:	f000 fad5 	bl	80012ac <MX_USART1_UART_Init>

  HAL_TIM_Base_Start(&htim1);
 8000d02:	48ad      	ldr	r0, [pc, #692]	; (8000fb8 <main+0x2d8>)
 8000d04:	f003 fa74 	bl	80041f0 <HAL_TIM_Base_Start>
  SSD1306_Init();
 8000d08:	f000 fba8 	bl	800145c <SSD1306_Init>

  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000d0c:	4bab      	ldr	r3, [pc, #684]	; (8000fbc <main+0x2dc>)
 8000d0e:	4aac      	ldr	r2, [pc, #688]	; (8000fc0 <main+0x2e0>)
 8000d10:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8000d12:	4baa      	ldr	r3, [pc, #680]	; (8000fbc <main+0x2dc>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8000d18:	4ba8      	ldr	r3, [pc, #672]	; (8000fbc <main+0x2dc>)
 8000d1a:	4aaa      	ldr	r2, [pc, #680]	; (8000fc4 <main+0x2e4>)
 8000d1c:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8000d1e:	4ba7      	ldr	r3, [pc, #668]	; (8000fbc <main+0x2dc>)
 8000d20:	2210      	movs	r2, #16
 8000d22:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 8000d24:	4ba5      	ldr	r3, [pc, #660]	; (8000fbc <main+0x2dc>)
 8000d26:	4aa6      	ldr	r2, [pc, #664]	; (8000fc0 <main+0x2e0>)
 8000d28:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 8000d2a:	4ba4      	ldr	r3, [pc, #656]	; (8000fbc <main+0x2dc>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8000d30:	4ba2      	ldr	r3, [pc, #648]	; (8000fbc <main+0x2dc>)
 8000d32:	4aa5      	ldr	r2, [pc, #660]	; (8000fc8 <main+0x2e8>)
 8000d34:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8000d36:	4ba5      	ldr	r3, [pc, #660]	; (8000fcc <main+0x2ec>)
 8000d38:	4aa0      	ldr	r2, [pc, #640]	; (8000fbc <main+0x2dc>)
 8000d3a:	601a      	str	r2, [r3, #0]

  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	9305      	str	r3, [sp, #20]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9304      	str	r3, [sp, #16]
 8000d44:	2300      	movs	r3, #0
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	2307      	movs	r3, #7
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	2301      	movs	r3, #1
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	a396      	add	r3, pc, #600	; (adr r3, 8000fb0 <main+0x2d0>)
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	489c      	ldr	r0, [pc, #624]	; (8000fcc <main+0x2ec>)
 8000d5c:	f7ff feb2 	bl	8000ac4 <SX1278_init>
  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

  if (master == 1) {
 8000d60:	4b9b      	ldr	r3, [pc, #620]	; (8000fd0 <main+0x2f0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d10f      	bne.n	8000d88 <main+0xa8>
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000d68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	4897      	ldr	r0, [pc, #604]	; (8000fcc <main+0x2ec>)
 8000d70:	f7ff fe11 	bl	8000996 <SX1278_LoRaEntryTx>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a97      	ldr	r2, [pc, #604]	; (8000fd4 <main+0x2f4>)
 8000d78:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d80:	4895      	ldr	r0, [pc, #596]	; (8000fd8 <main+0x2f8>)
 8000d82:	f001 fbc8 	bl	8002516 <HAL_GPIO_WritePin>
 8000d86:	e00e      	b.n	8000da6 <main+0xc6>
  } else {
	  ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000d88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	488f      	ldr	r0, [pc, #572]	; (8000fcc <main+0x2ec>)
 8000d90:	f7ff fd58 	bl	8000844 <SX1278_LoRaEntryRx>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a8f      	ldr	r2, [pc, #572]	; (8000fd4 <main+0x2f4>)
 8000d98:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da0:	488d      	ldr	r0, [pc, #564]	; (8000fd8 <main+0x2f8>)
 8000da2:	f001 fbb8 	bl	8002516 <HAL_GPIO_WritePin>
  }

  while (1)
  {
	  buffer[0]= (uint8_t)Flame ;
 8000da6:	4b8d      	ldr	r3, [pc, #564]	; (8000fdc <main+0x2fc>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b8c      	ldr	r3, [pc, #560]	; (8000fe0 <main+0x300>)
 8000dae:	701a      	strb	r2, [r3, #0]
	  buffer[1]= (uint8_t)(Flame>>8);
 8000db0:	4b8a      	ldr	r3, [pc, #552]	; (8000fdc <main+0x2fc>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b89      	ldr	r3, [pc, #548]	; (8000fe0 <main+0x300>)
 8000dbc:	705a      	strb	r2, [r3, #1]
	  buffer[2]= (uint8_t)ON;
 8000dbe:	4b89      	ldr	r3, [pc, #548]	; (8000fe4 <main+0x304>)
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b87      	ldr	r3, [pc, #540]	; (8000fe0 <main+0x300>)
 8000dc4:	709a      	strb	r2, [r3, #2]
	  buffer[3]= (uint8_t)MQ2;
 8000dc6:	4b88      	ldr	r3, [pc, #544]	; (8000fe8 <main+0x308>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b84      	ldr	r3, [pc, #528]	; (8000fe0 <main+0x300>)
 8000dce:	70da      	strb	r2, [r3, #3]
	  buffer[4]= (uint8_t)(MQ2>>8);
 8000dd0:	4b85      	ldr	r3, [pc, #532]	; (8000fe8 <main+0x308>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b81      	ldr	r3, [pc, #516]	; (8000fe0 <main+0x300>)
 8000ddc:	711a      	strb	r2, [r3, #4]
	  buffer[5]= (uint8_t)Temp;
 8000dde:	4b83      	ldr	r3, [pc, #524]	; (8000fec <main+0x30c>)
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	4b7f      	ldr	r3, [pc, #508]	; (8000fe0 <main+0x300>)
 8000de4:	715a      	strb	r2, [r3, #5]
	  buffer[6]= (uint8_t)Humi;
 8000de6:	4b82      	ldr	r3, [pc, #520]	; (8000ff0 <main+0x310>)
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	4b7d      	ldr	r3, [pc, #500]	; (8000fe0 <main+0x300>)
 8000dec:	719a      	strb	r2, [r3, #6]
	  buffer[7]= (uint8_t)ONMQ2;
 8000dee:	4b81      	ldr	r3, [pc, #516]	; (8000ff4 <main+0x314>)
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	4b7b      	ldr	r3, [pc, #492]	; (8000fe0 <main+0x300>)
 8000df4:	71da      	strb	r2, [r3, #7]

	  if (master == 1) {
 8000df6:	4b76      	ldr	r3, [pc, #472]	; (8000fd0 <main+0x2f0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d12f      	bne.n	8000e5e <main+0x17e>

		HAL_Delay(1000);
 8000dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e02:	f001 f809 	bl	8001e18 <HAL_Delay>

		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000e06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	486f      	ldr	r0, [pc, #444]	; (8000fcc <main+0x2ec>)
 8000e0e:	f7ff fdc2 	bl	8000996 <SX1278_LoRaEntryTx>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a6f      	ldr	r2, [pc, #444]	; (8000fd4 <main+0x2f4>)
 8000e16:	6013      	str	r3, [r2, #0]

		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,16, 2000);
 8000e18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	4970      	ldr	r1, [pc, #448]	; (8000fe0 <main+0x300>)
 8000e20:	486a      	ldr	r0, [pc, #424]	; (8000fcc <main+0x2ec>)
 8000e22:	f7ff fe10 	bl	8000a46 <SX1278_LoRaTxPacket>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a6a      	ldr	r2, [pc, #424]	; (8000fd4 <main+0x2f4>)
 8000e2a:	6013      	str	r3, [r2, #0]
		if(ret)
 8000e2c:	4b69      	ldr	r3, [pc, #420]	; (8000fd4 <main+0x2f4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0b8      	beq.n	8000da6 <main+0xc6>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3a:	4867      	ldr	r0, [pc, #412]	; (8000fd8 <main+0x2f8>)
 8000e3c:	f001 fb6b 	bl	8002516 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000e40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e44:	f000 ffe8 	bl	8001e18 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4e:	4862      	ldr	r0, [pc, #392]	; (8000fd8 <main+0x2f8>)
 8000e50:	f001 fb61 	bl	8002516 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000e54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e58:	f000 ffde 	bl	8001e18 <HAL_Delay>
 8000e5c:	e7a3      	b.n	8000da6 <main+0xc6>
		}

	  } else {

		HAL_Delay(1000);
 8000e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e62:	f000 ffd9 	bl	8001e18 <HAL_Delay>

		ret = SX1278_LoRaRxPacket(&SX1278);
 8000e66:	4859      	ldr	r0, [pc, #356]	; (8000fcc <main+0x2ec>)
 8000e68:	f7ff fd51 	bl	800090e <SX1278_LoRaRxPacket>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <main+0x2f4>)
 8000e72:	601a      	str	r2, [r3, #0]

		if (ret > 0) {
 8000e74:	4b57      	ldr	r3, [pc, #348]	; (8000fd4 <main+0x2f4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	dd94      	ble.n	8000da6 <main+0xc6>

			if(SX1278_read(&SX1278, (uint8_t*) buffer, ret)>0){
 8000e7c:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <main+0x2f4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	4956      	ldr	r1, [pc, #344]	; (8000fe0 <main+0x300>)
 8000e86:	4851      	ldr	r0, [pc, #324]	; (8000fcc <main+0x2ec>)
 8000e88:	f7ff fe49 	bl	8000b1e <SX1278_read>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d089      	beq.n	8000da6 <main+0xc6>

				Flame = ((uint16_t)buffer[1]<<8 | (uint16_t)buffer[0]);
 8000e92:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <main+0x300>)
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <main+0x300>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <main+0x2fc>)
 8000ea8:	801a      	strh	r2, [r3, #0]
				SSD1306_GotoXY (0,0);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 fc3d 	bl	800172c <SSD1306_GotoXY>
				sprintf(strCopy,"Flame Value: %d", Flame);
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <main+0x2fc>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	494f      	ldr	r1, [pc, #316]	; (8000ff8 <main+0x318>)
 8000eba:	4850      	ldr	r0, [pc, #320]	; (8000ffc <main+0x31c>)
 8000ebc:	f004 f932 	bl	8005124 <siprintf>
				SSD1306_Puts (strCopy, &Font_7x10, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	494f      	ldr	r1, [pc, #316]	; (8001000 <main+0x320>)
 8000ec4:	484d      	ldr	r0, [pc, #308]	; (8000ffc <main+0x31c>)
 8000ec6:	f000 fcc7 	bl	8001858 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8000eca:	f000 fb8b 	bl	80015e4 <SSD1306_UpdateScreen>

				MQ2 = ((uint16_t)buffer[4]<<8 | (uint16_t)buffer[3]);
 8000ece:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <main+0x300>)
 8000ed0:	791b      	ldrb	r3, [r3, #4]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <main+0x300>)
 8000ed8:	78db      	ldrb	r3, [r3, #3]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b41      	ldr	r3, [pc, #260]	; (8000fe8 <main+0x308>)
 8000ee4:	801a      	strh	r2, [r3, #0]
				SSD1306_GotoXY (0,10);
 8000ee6:	210a      	movs	r1, #10
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 fc1f 	bl	800172c <SSD1306_GotoXY>
				sprintf(strCopy,"MQ2 Value: %d", MQ2);
 8000eee:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <main+0x308>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4943      	ldr	r1, [pc, #268]	; (8001004 <main+0x324>)
 8000ef6:	4841      	ldr	r0, [pc, #260]	; (8000ffc <main+0x31c>)
 8000ef8:	f004 f914 	bl	8005124 <siprintf>
				SSD1306_Puts (strCopy, &Font_7x10, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	4940      	ldr	r1, [pc, #256]	; (8001000 <main+0x320>)
 8000f00:	483e      	ldr	r0, [pc, #248]	; (8000ffc <main+0x31c>)
 8000f02:	f000 fca9 	bl	8001858 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8000f06:	f000 fb6d 	bl	80015e4 <SSD1306_UpdateScreen>

				if(buffer[7]==0){
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <main+0x300>)
 8000f0c:	79db      	ldrb	r3, [r3, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d11e      	bne.n	8000f50 <main+0x270>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f18:	482a      	ldr	r0, [pc, #168]	; (8000fc4 <main+0x2e4>)
 8000f1a:	f001 fafc 	bl	8002516 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8000f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f22:	f000 ff79 	bl	8001e18 <HAL_Delay>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	4825      	ldr	r0, [pc, #148]	; (8000fc4 <main+0x2e4>)
 8000f2e:	f001 faf2 	bl	8002516 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 8000f32:	200a      	movs	r0, #10
 8000f34:	f000 ff70 	bl	8001e18 <HAL_Delay>
					SSD1306_GotoXY (0,20);
 8000f38:	2114      	movs	r1, #20
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 fbf6 	bl	800172c <SSD1306_GotoXY>
					SSD1306_Puts ("An toàn", &Font_7x10, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	492f      	ldr	r1, [pc, #188]	; (8001000 <main+0x320>)
 8000f44:	4830      	ldr	r0, [pc, #192]	; (8001008 <main+0x328>)
 8000f46:	f000 fc87 	bl	8001858 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000f4a:	f000 fb4b 	bl	80015e4 <SSD1306_UpdateScreen>
 8000f4e:	e00a      	b.n	8000f66 <main+0x286>
				} else{
					SSD1306_GotoXY (0,20);
 8000f50:	2114      	movs	r1, #20
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 fbea 	bl	800172c <SSD1306_GotoXY>
					SSD1306_Puts ("Có GAS", &Font_7x10, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4929      	ldr	r1, [pc, #164]	; (8001000 <main+0x320>)
 8000f5c:	482b      	ldr	r0, [pc, #172]	; (800100c <main+0x32c>)
 8000f5e:	f000 fc7b 	bl	8001858 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000f62:	f000 fb3f 	bl	80015e4 <SSD1306_UpdateScreen>
				}

				if(buffer[2]==0){
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <main+0x300>)
 8000f68:	789b      	ldrb	r3, [r3, #2]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d150      	bne.n	8001010 <main+0x330>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <main+0x2e4>)
 8000f76:	f001 face 	bl	8002516 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8000f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7e:	f000 ff4b 	bl	8001e18 <HAL_Delay>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <main+0x2e4>)
 8000f8a:	f001 fac4 	bl	8002516 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 8000f8e:	200a      	movs	r0, #10
 8000f90:	f000 ff42 	bl	8001e18 <HAL_Delay>
					SSD1306_GotoXY (0,30);
 8000f94:	211e      	movs	r1, #30
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 fbc8 	bl	800172c <SSD1306_GotoXY>
					SSD1306_Puts ("An toàn", &Font_7x10, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4918      	ldr	r1, [pc, #96]	; (8001000 <main+0x320>)
 8000fa0:	4819      	ldr	r0, [pc, #100]	; (8001008 <main+0x328>)
 8000fa2:	f000 fc59 	bl	8001858 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8000fa6:	f000 fb1d 	bl	80015e4 <SSD1306_UpdateScreen>
 8000faa:	e03c      	b.n	8001026 <main+0x346>
 8000fac:	f3af 8000 	nop.w
 8000fb0:	19de5080 	.word	0x19de5080
 8000fb4:	00000000 	.word	0x00000000
 8000fb8:	20000130 	.word	0x20000130
 8000fbc:	200001c0 	.word	0x200001c0
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	200000d8 	.word	0x200000d8
 8000fcc:	200001e0 	.word	0x200001e0
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	200002f8 	.word	0x200002f8
 8000fd8:	40011000 	.word	0x40011000
 8000fdc:	2000031e 	.word	0x2000031e
 8000fe0:	200002fc 	.word	0x200002fc
 8000fe4:	20000322 	.word	0x20000322
 8000fe8:	20000320 	.word	0x20000320
 8000fec:	2000031c 	.word	0x2000031c
 8000ff0:	2000031d 	.word	0x2000031d
 8000ff4:	20000323 	.word	0x20000323
 8000ff8:	08005aa0 	.word	0x08005aa0
 8000ffc:	2000030c 	.word	0x2000030c
 8001000:	20000000 	.word	0x20000000
 8001004:	08005ab0 	.word	0x08005ab0
 8001008:	08005ac0 	.word	0x08005ac0
 800100c:	08005acc 	.word	0x08005acc
				} else{
					SSD1306_GotoXY (0,30);
 8001010:	211e      	movs	r1, #30
 8001012:	2000      	movs	r0, #0
 8001014:	f000 fb8a 	bl	800172c <SSD1306_GotoXY>
					SSD1306_Puts ("Có LỬA", &Font_7x10, 1);
 8001018:	2201      	movs	r2, #1
 800101a:	491f      	ldr	r1, [pc, #124]	; (8001098 <main+0x3b8>)
 800101c:	481f      	ldr	r0, [pc, #124]	; (800109c <main+0x3bc>)
 800101e:	f000 fc1b 	bl	8001858 <SSD1306_Puts>
					SSD1306_UpdateScreen();
 8001022:	f000 fadf 	bl	80015e4 <SSD1306_UpdateScreen>
				}

				SSD1306_GotoXY (0,40);
 8001026:	2128      	movs	r1, #40	; 0x28
 8001028:	2000      	movs	r0, #0
 800102a:	f000 fb7f 	bl	800172c <SSD1306_GotoXY>
				sprintf(strCopy,"Hum: %d", Humi);
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <main+0x3c0>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	491b      	ldr	r1, [pc, #108]	; (80010a4 <main+0x3c4>)
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <main+0x3c8>)
 8001038:	f004 f874 	bl	8005124 <siprintf>
				SSD1306_Puts (strCopy, &Font_7x10, 1);
 800103c:	2201      	movs	r2, #1
 800103e:	4916      	ldr	r1, [pc, #88]	; (8001098 <main+0x3b8>)
 8001040:	4819      	ldr	r0, [pc, #100]	; (80010a8 <main+0x3c8>)
 8001042:	f000 fc09 	bl	8001858 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8001046:	f000 facd 	bl	80015e4 <SSD1306_UpdateScreen>

				SSD1306_GotoXY (0,50);
 800104a:	2132      	movs	r1, #50	; 0x32
 800104c:	2000      	movs	r0, #0
 800104e:	f000 fb6d 	bl	800172c <SSD1306_GotoXY>
				sprintf(strCopy,"Temp: %d", Temp);
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <main+0x3cc>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4915      	ldr	r1, [pc, #84]	; (80010b0 <main+0x3d0>)
 800105a:	4813      	ldr	r0, [pc, #76]	; (80010a8 <main+0x3c8>)
 800105c:	f004 f862 	bl	8005124 <siprintf>
				SSD1306_Puts (strCopy, &Font_7x10, 1);
 8001060:	2201      	movs	r2, #1
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <main+0x3b8>)
 8001064:	4810      	ldr	r0, [pc, #64]	; (80010a8 <main+0x3c8>)
 8001066:	f000 fbf7 	bl	8001858 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 800106a:	f000 fabb 	bl	80015e4 <SSD1306_UpdateScreen>

				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001074:	480f      	ldr	r0, [pc, #60]	; (80010b4 <main+0x3d4>)
 8001076:	f001 fa4e 	bl	8002516 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 800107a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800107e:	f000 fecb 	bl	8001e18 <HAL_Delay>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <main+0x3d4>)
 800108a:	f001 fa44 	bl	8002516 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 800108e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001092:	f000 fec1 	bl	8001e18 <HAL_Delay>
	  buffer[0]= (uint8_t)Flame ;
 8001096:	e686      	b.n	8000da6 <main+0xc6>
 8001098:	20000000 	.word	0x20000000
 800109c:	08005ad4 	.word	0x08005ad4
 80010a0:	2000031d 	.word	0x2000031d
 80010a4:	08005ae0 	.word	0x08005ae0
 80010a8:	2000030c 	.word	0x2000030c
 80010ac:	2000031c 	.word	0x2000031c
 80010b0:	08005ae8 	.word	0x08005ae8
 80010b4:	40011000 	.word	0x40011000

080010b8 <SystemClock_Config>:
	}
  }
}

void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b090      	sub	sp, #64	; 0x40
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	2228      	movs	r2, #40	; 0x28
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 f84c 	bl	8005164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	4618      	mov	r0, r3
 8001102:	f001 ffeb 	bl	80030dc <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800110c:	f000 f9a0 	bl	8001450 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2302      	movs	r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2102      	movs	r1, #2
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fa58 	bl	80035e0 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001136:	f000 f98b 	bl	8001450 <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3740      	adds	r7, #64	; 0x40
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f001 f9e1 	bl	8002548 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f960 	bl	8001450 <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000084 	.word	0x20000084
 8001198:	40005400 	.word	0x40005400
 800119c:	00061a80 	.word	0x00061a80

080011a0 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_SPI1_Init+0x64>)
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <MX_SPI1_Init+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_SPI1_Init+0x64>)
 80011ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_SPI1_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_SPI1_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_SPI1_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_SPI1_Init+0x64>)
 80011cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_SPI1_Init+0x64>)
 80011d4:	2210      	movs	r2, #16
 80011d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_SPI1_Init+0x64>)
 80011ec:	220a      	movs	r2, #10
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_SPI1_Init+0x64>)
 80011f2:	f002 fb83 	bl	80038fc <HAL_SPI_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011fc:	f000 f928 	bl	8001450 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200000d8 	.word	0x200000d8
 8001208:	40013000 	.word	0x40013000

0800120c <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_TIM1_Init+0x98>)
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <MX_TIM1_Init+0x9c>)
 800122c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_TIM1_Init+0x98>)
 8001230:	2247      	movs	r2, #71	; 0x47
 8001232:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_TIM1_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_TIM1_Init+0x98>)
 800123c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_TIM1_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_TIM1_Init+0x98>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_TIM1_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001254:	4813      	ldr	r0, [pc, #76]	; (80012a4 <MX_TIM1_Init+0x98>)
 8001256:	f002 ff7b 	bl	8004150 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001260:	f000 f8f6 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4619      	mov	r1, r3
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <MX_TIM1_Init+0x98>)
 8001272:	f003 f807 	bl	8004284 <HAL_TIM_ConfigClockSource>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800127c:	f000 f8e8 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_TIM1_Init+0x98>)
 800128e:	f003 f9b9 	bl	8004604 <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 f8da 	bl	8001450 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000130 	.word	0x20000130
 80012a8:	40012c00 	.word	0x40012c00

080012ac <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_USART1_UART_Init+0x50>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012e4:	f003 f9ec 	bl	80046c0 <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ee:	f000 f8af 	bl	8001450 <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000178 	.word	0x20000178
 80012fc:	40013800 	.word	0x40013800

08001300 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <MX_GPIO_Init+0x140>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a49      	ldr	r2, [pc, #292]	; (8001440 <MX_GPIO_Init+0x140>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <MX_GPIO_Init+0x140>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <MX_GPIO_Init+0x140>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a43      	ldr	r2, [pc, #268]	; (8001440 <MX_GPIO_Init+0x140>)
 8001332:	f043 0320 	orr.w	r3, r3, #32
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b41      	ldr	r3, [pc, #260]	; (8001440 <MX_GPIO_Init+0x140>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <MX_GPIO_Init+0x140>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a3d      	ldr	r2, [pc, #244]	; (8001440 <MX_GPIO_Init+0x140>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <MX_GPIO_Init+0x140>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <MX_GPIO_Init+0x140>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a37      	ldr	r2, [pc, #220]	; (8001440 <MX_GPIO_Init+0x140>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <MX_GPIO_Init+0x140>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137a:	4832      	ldr	r0, [pc, #200]	; (8001444 <MX_GPIO_Init+0x144>)
 800137c:	f001 f8cb 	bl	8002516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2102      	movs	r1, #2
 8001384:	4830      	ldr	r0, [pc, #192]	; (8001448 <MX_GPIO_Init+0x148>)
 8001386:	f001 f8c6 	bl	8002516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	2110      	movs	r1, #16
 800138e:	482e      	ldr	r0, [pc, #184]	; (8001448 <MX_GPIO_Init+0x148>)
 8001390:	f001 f8c1 	bl	8002516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2101      	movs	r1, #1
 8001398:	482c      	ldr	r0, [pc, #176]	; (800144c <MX_GPIO_Init+0x14c>)
 800139a:	f001 f8bc 	bl	8002516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a4:	4828      	ldr	r0, [pc, #160]	; (8001448 <MX_GPIO_Init+0x148>)
 80013a6:	f001 f8b6 	bl	8002516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4619      	mov	r1, r3
 80013c2:	4820      	ldr	r0, [pc, #128]	; (8001444 <MX_GPIO_Init+0x144>)
 80013c4:	f000 ff0c 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|NSS_Pin;
 80013c8:	2312      	movs	r3, #18
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	481a      	ldr	r0, [pc, #104]	; (8001448 <MX_GPIO_Init+0x148>)
 80013e0:	f000 fefe 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80013e4:	2301      	movs	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4619      	mov	r1, r3
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_GPIO_Init+0x14c>)
 80013fc:	f000 fef0 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001400:	2302      	movs	r3, #2
 8001402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <MX_GPIO_Init+0x14c>)
 8001414:	f000 fee4 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2302      	movs	r3, #2
 8001428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_GPIO_Init+0x148>)
 8001432:	f000 fed5 	bl	80021e0 <HAL_GPIO_Init>
}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	40011000 	.word	0x40011000
 8001448:	40010800 	.word	0x40010800
 800144c:	40010c00 	.word	0x40010c00

08001450 <Error_Handler>:

void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  __disable_irq();
  while (1)
 8001458:	e7fe      	b.n	8001458 <Error_Handler+0x8>
	...

0800145c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001462:	f000 fa1f 	bl	80018a4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001466:	f644 6320 	movw	r3, #20000	; 0x4e20
 800146a:	2201      	movs	r2, #1
 800146c:	2178      	movs	r1, #120	; 0x78
 800146e:	485b      	ldr	r0, [pc, #364]	; (80015dc <SSD1306_Init+0x180>)
 8001470:	f001 faac 	bl	80029cc <HAL_I2C_IsDeviceReady>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800147a:	2300      	movs	r3, #0
 800147c:	e0a9      	b.n	80015d2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800147e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001482:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001484:	e002      	b.n	800148c <SSD1306_Init+0x30>
		p--;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3b01      	subs	r3, #1
 800148a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f9      	bne.n	8001486 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001492:	22ae      	movs	r2, #174	; 0xae
 8001494:	2100      	movs	r1, #0
 8001496:	2078      	movs	r0, #120	; 0x78
 8001498:	f000 fa7e 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800149c:	2220      	movs	r2, #32
 800149e:	2100      	movs	r1, #0
 80014a0:	2078      	movs	r0, #120	; 0x78
 80014a2:	f000 fa79 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014a6:	2210      	movs	r2, #16
 80014a8:	2100      	movs	r1, #0
 80014aa:	2078      	movs	r0, #120	; 0x78
 80014ac:	f000 fa74 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014b0:	22b0      	movs	r2, #176	; 0xb0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2078      	movs	r0, #120	; 0x78
 80014b6:	f000 fa6f 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014ba:	22c8      	movs	r2, #200	; 0xc8
 80014bc:	2100      	movs	r1, #0
 80014be:	2078      	movs	r0, #120	; 0x78
 80014c0:	f000 fa6a 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2078      	movs	r0, #120	; 0x78
 80014ca:	f000 fa65 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80014ce:	2210      	movs	r2, #16
 80014d0:	2100      	movs	r1, #0
 80014d2:	2078      	movs	r0, #120	; 0x78
 80014d4:	f000 fa60 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80014d8:	2240      	movs	r2, #64	; 0x40
 80014da:	2100      	movs	r1, #0
 80014dc:	2078      	movs	r0, #120	; 0x78
 80014de:	f000 fa5b 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80014e2:	2281      	movs	r2, #129	; 0x81
 80014e4:	2100      	movs	r1, #0
 80014e6:	2078      	movs	r0, #120	; 0x78
 80014e8:	f000 fa56 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80014ec:	22ff      	movs	r2, #255	; 0xff
 80014ee:	2100      	movs	r1, #0
 80014f0:	2078      	movs	r0, #120	; 0x78
 80014f2:	f000 fa51 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014f6:	22a1      	movs	r2, #161	; 0xa1
 80014f8:	2100      	movs	r1, #0
 80014fa:	2078      	movs	r0, #120	; 0x78
 80014fc:	f000 fa4c 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001500:	22a6      	movs	r2, #166	; 0xa6
 8001502:	2100      	movs	r1, #0
 8001504:	2078      	movs	r0, #120	; 0x78
 8001506:	f000 fa47 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800150a:	22a8      	movs	r2, #168	; 0xa8
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	; 0x78
 8001510:	f000 fa42 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001514:	223f      	movs	r2, #63	; 0x3f
 8001516:	2100      	movs	r1, #0
 8001518:	2078      	movs	r0, #120	; 0x78
 800151a:	f000 fa3d 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800151e:	22a4      	movs	r2, #164	; 0xa4
 8001520:	2100      	movs	r1, #0
 8001522:	2078      	movs	r0, #120	; 0x78
 8001524:	f000 fa38 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001528:	22d3      	movs	r2, #211	; 0xd3
 800152a:	2100      	movs	r1, #0
 800152c:	2078      	movs	r0, #120	; 0x78
 800152e:	f000 fa33 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2078      	movs	r0, #120	; 0x78
 8001538:	f000 fa2e 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800153c:	22d5      	movs	r2, #213	; 0xd5
 800153e:	2100      	movs	r1, #0
 8001540:	2078      	movs	r0, #120	; 0x78
 8001542:	f000 fa29 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001546:	22f0      	movs	r2, #240	; 0xf0
 8001548:	2100      	movs	r1, #0
 800154a:	2078      	movs	r0, #120	; 0x78
 800154c:	f000 fa24 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001550:	22d9      	movs	r2, #217	; 0xd9
 8001552:	2100      	movs	r1, #0
 8001554:	2078      	movs	r0, #120	; 0x78
 8001556:	f000 fa1f 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800155a:	2222      	movs	r2, #34	; 0x22
 800155c:	2100      	movs	r1, #0
 800155e:	2078      	movs	r0, #120	; 0x78
 8001560:	f000 fa1a 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001564:	22da      	movs	r2, #218	; 0xda
 8001566:	2100      	movs	r1, #0
 8001568:	2078      	movs	r0, #120	; 0x78
 800156a:	f000 fa15 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800156e:	2212      	movs	r2, #18
 8001570:	2100      	movs	r1, #0
 8001572:	2078      	movs	r0, #120	; 0x78
 8001574:	f000 fa10 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001578:	22db      	movs	r2, #219	; 0xdb
 800157a:	2100      	movs	r1, #0
 800157c:	2078      	movs	r0, #120	; 0x78
 800157e:	f000 fa0b 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001582:	2220      	movs	r2, #32
 8001584:	2100      	movs	r1, #0
 8001586:	2078      	movs	r0, #120	; 0x78
 8001588:	f000 fa06 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800158c:	228d      	movs	r2, #141	; 0x8d
 800158e:	2100      	movs	r1, #0
 8001590:	2078      	movs	r0, #120	; 0x78
 8001592:	f000 fa01 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001596:	2214      	movs	r2, #20
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 f9fc 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80015a0:	22af      	movs	r2, #175	; 0xaf
 80015a2:	2100      	movs	r1, #0
 80015a4:	2078      	movs	r0, #120	; 0x78
 80015a6:	f000 f9f7 	bl	8001998 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015aa:	222e      	movs	r2, #46	; 0x2e
 80015ac:	2100      	movs	r1, #0
 80015ae:	2078      	movs	r0, #120	; 0x78
 80015b0:	f000 f9f2 	bl	8001998 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f843 	bl	8001640 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80015ba:	f000 f813 	bl	80015e4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <SSD1306_Init+0x184>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SSD1306_Init+0x184>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SSD1306_Init+0x184>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000084 	.word	0x20000084
 80015e0:	20000724 	.word	0x20000724

080015e4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	e01d      	b.n	800162c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	3b50      	subs	r3, #80	; 0x50
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	2100      	movs	r1, #0
 80015fa:	2078      	movs	r0, #120	; 0x78
 80015fc:	f000 f9cc 	bl	8001998 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	2078      	movs	r0, #120	; 0x78
 8001606:	f000 f9c7 	bl	8001998 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800160a:	2210      	movs	r2, #16
 800160c:	2100      	movs	r1, #0
 800160e:	2078      	movs	r0, #120	; 0x78
 8001610:	f000 f9c2 	bl	8001998 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	01db      	lsls	r3, r3, #7
 8001618:	4a08      	ldr	r2, [pc, #32]	; (800163c <SSD1306_UpdateScreen+0x58>)
 800161a:	441a      	add	r2, r3
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	2140      	movs	r1, #64	; 0x40
 8001620:	2078      	movs	r0, #120	; 0x78
 8001622:	f000 f953 	bl	80018cc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	3301      	adds	r3, #1
 800162a:	71fb      	strb	r3, [r7, #7]
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	2b07      	cmp	r3, #7
 8001630:	d9de      	bls.n	80015f0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000324 	.word	0x20000324

08001640 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <SSD1306_Fill+0x14>
 8001650:	2300      	movs	r3, #0
 8001652:	e000      	b.n	8001656 <SSD1306_Fill+0x16>
 8001654:	23ff      	movs	r3, #255	; 0xff
 8001656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165a:	4619      	mov	r1, r3
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <SSD1306_Fill+0x2c>)
 800165e:	f003 fd81 	bl	8005164 <memset>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000324 	.word	0x20000324

08001670 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
 800167a:	460b      	mov	r3, r1
 800167c:	80bb      	strh	r3, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	70fb      	strb	r3, [r7, #3]
	if (
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	2b7f      	cmp	r3, #127	; 0x7f
 8001686:	d848      	bhi.n	800171a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001688:	88bb      	ldrh	r3, [r7, #4]
 800168a:	2b3f      	cmp	r3, #63	; 0x3f
 800168c:	d845      	bhi.n	800171a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <SSD1306_DrawPixel+0xb4>)
 8001690:	791b      	ldrb	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d11a      	bne.n	80016e0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016aa:	88fa      	ldrh	r2, [r7, #6]
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	08db      	lsrs	r3, r3, #3
 80016b0:	b298      	uxth	r0, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	01db      	lsls	r3, r3, #7
 80016b6:	4413      	add	r3, r2
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <SSD1306_DrawPixel+0xb8>)
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	88bb      	ldrh	r3, [r7, #4]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b259      	sxtb	r1, r3
 80016d0:	88fa      	ldrh	r2, [r7, #6]
 80016d2:	4603      	mov	r3, r0
 80016d4:	01db      	lsls	r3, r3, #7
 80016d6:	4413      	add	r3, r2
 80016d8:	b2c9      	uxtb	r1, r1
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <SSD1306_DrawPixel+0xb8>)
 80016dc:	54d1      	strb	r1, [r2, r3]
 80016de:	e01d      	b.n	800171c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	08db      	lsrs	r3, r3, #3
 80016e6:	b298      	uxth	r0, r3
 80016e8:	4603      	mov	r3, r0
 80016ea:	01db      	lsls	r3, r3, #7
 80016ec:	4413      	add	r3, r2
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <SSD1306_DrawPixel+0xb8>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	b25a      	sxtb	r2, r3
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	b25b      	sxtb	r3, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4013      	ands	r3, r2
 8001708:	b259      	sxtb	r1, r3
 800170a:	88fa      	ldrh	r2, [r7, #6]
 800170c:	4603      	mov	r3, r0
 800170e:	01db      	lsls	r3, r3, #7
 8001710:	4413      	add	r3, r2
 8001712:	b2c9      	uxtb	r1, r1
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <SSD1306_DrawPixel+0xb8>)
 8001716:	54d1      	strb	r1, [r2, r3]
 8001718:	e000      	b.n	800171c <SSD1306_DrawPixel+0xac>
		return;
 800171a:	bf00      	nop
	}
}
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	20000724 	.word	0x20000724
 8001728:	20000324 	.word	0x20000324

0800172c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	460a      	mov	r2, r1
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4613      	mov	r3, r2
 800173a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800173c:	4a05      	ldr	r2, [pc, #20]	; (8001754 <SSD1306_GotoXY+0x28>)
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <SSD1306_GotoXY+0x28>)
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	8053      	strh	r3, [r2, #2]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000724 	.word	0x20000724

08001758 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001768:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <SSD1306_Putc+0xfc>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
	if (
 8001774:	2b7f      	cmp	r3, #127	; 0x7f
 8001776:	dc07      	bgt.n	8001788 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <SSD1306_Putc+0xfc>)
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	461a      	mov	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	785b      	ldrb	r3, [r3, #1]
 8001782:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001784:	2b3f      	cmp	r3, #63	; 0x3f
 8001786:	dd01      	ble.n	800178c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001788:	2300      	movs	r3, #0
 800178a:	e05e      	b.n	800184a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e04b      	b.n	800182a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	3b20      	subs	r3, #32
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	7849      	ldrb	r1, [r1, #1]
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4619      	mov	r1, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	440b      	add	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	e030      	b.n	8001818 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d010      	beq.n	80017e8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <SSD1306_Putc+0xfc>)
 80017c8:	881a      	ldrh	r2, [r3, #0]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b298      	uxth	r0, r3
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <SSD1306_Putc+0xfc>)
 80017d4:	885a      	ldrh	r2, [r3, #2]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4413      	add	r3, r2
 80017dc:	b29b      	uxth	r3, r3
 80017de:	79ba      	ldrb	r2, [r7, #6]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff ff45 	bl	8001670 <SSD1306_DrawPixel>
 80017e6:	e014      	b.n	8001812 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <SSD1306_Putc+0xfc>)
 80017ea:	881a      	ldrh	r2, [r3, #0]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b298      	uxth	r0, r3
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <SSD1306_Putc+0xfc>)
 80017f6:	885a      	ldrh	r2, [r3, #2]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	b299      	uxth	r1, r3
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf0c      	ite	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	2300      	movne	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	f7ff ff2f 	bl	8001670 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3301      	adds	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4293      	cmp	r3, r2
 8001822:	d3c8      	bcc.n	80017b6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	785b      	ldrb	r3, [r3, #1]
 800182e:	461a      	mov	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	4293      	cmp	r3, r2
 8001834:	d3ad      	bcc.n	8001792 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <SSD1306_Putc+0xfc>)
 8001838:	881a      	ldrh	r2, [r3, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	4413      	add	r3, r2
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <SSD1306_Putc+0xfc>)
 8001846:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001848:	79fb      	ldrb	r3, [r7, #7]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000724 	.word	0x20000724

08001858 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	4613      	mov	r3, r2
 8001864:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001866:	e012      	b.n	800188e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	79fa      	ldrb	r2, [r7, #7]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff71 	bl	8001758 <SSD1306_Putc>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d002      	beq.n	8001888 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	e008      	b.n	800189a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3301      	adds	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e8      	bne.n	8001868 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	781b      	ldrb	r3, [r3, #0]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <ssd1306_I2C_Init+0x24>)
 80018ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018ae:	e002      	b.n	80018b6 <ssd1306_I2C_Init+0x12>
		p--;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	0003d090 	.word	0x0003d090

080018cc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b0c7      	sub	sp, #284	; 0x11c
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80018da:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80018de:	600a      	str	r2, [r1, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018e6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018ea:	4622      	mov	r2, r4
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018f2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80018f6:	4602      	mov	r2, r0
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001902:	460a      	mov	r2, r1
 8001904:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800190a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800190e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001912:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001916:	7812      	ldrb	r2, [r2, #0]
 8001918:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001920:	e015      	b.n	800194e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001922:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001926:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800192a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	441a      	add	r2, r3
 8001932:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001936:	3301      	adds	r3, #1
 8001938:	7811      	ldrb	r1, [r2, #0]
 800193a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800193e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001942:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001944:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001948:	3301      	adds	r3, #1
 800194a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800194e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001952:	b29b      	uxth	r3, r3
 8001954:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001958:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d8df      	bhi.n	8001922 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001962:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001966:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b299      	uxth	r1, r3
 800196e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001972:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	f107 020c 	add.w	r2, r7, #12
 8001980:	200a      	movs	r0, #10
 8001982:	9000      	str	r0, [sp, #0]
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <ssd1306_I2C_WriteMulti+0xc8>)
 8001986:	f000 ff23 	bl	80027d0 <HAL_I2C_Master_Transmit>
}
 800198a:	bf00      	nop
 800198c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	20000084 	.word	0x20000084

08001998 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af02      	add	r7, sp, #8
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	460b      	mov	r3, r1
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	4613      	mov	r3, r2
 80019a8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019aa:	79bb      	ldrb	r3, [r7, #6]
 80019ac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	b299      	uxth	r1, r3
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	230a      	movs	r3, #10
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2302      	movs	r3, #2
 80019c0:	4803      	ldr	r0, [pc, #12]	; (80019d0 <ssd1306_I2C_Write+0x38>)
 80019c2:	f000 ff05 	bl	80027d0 <HAL_I2C_Master_Transmit>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000084 	.word	0x20000084

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_MspInit+0x5c>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <HAL_MspInit+0x5c>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6193      	str	r3, [r2, #24]
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_MspInit+0x5c>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_MspInit+0x5c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_MspInit+0x5c>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_MspInit+0x5c>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_MspInit+0x60>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_MspInit+0x60>)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000

08001a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_I2C_MspInit+0x70>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d123      	bne.n	8001aa0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_I2C_MspInit+0x74>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a13      	ldr	r2, [pc, #76]	; (8001aac <HAL_I2C_MspInit+0x74>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_I2C_MspInit+0x74>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a70:	23c0      	movs	r3, #192	; 0xc0
 8001a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a74:	2312      	movs	r3, #18
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4619      	mov	r1, r3
 8001a82:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <HAL_I2C_MspInit+0x78>)
 8001a84:	f000 fbac 	bl	80021e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_I2C_MspInit+0x74>)
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_I2C_MspInit+0x74>)
 8001a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a92:	61d3      	str	r3, [r2, #28]
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_I2C_MspInit+0x74>)
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010c00 	.word	0x40010c00

08001ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_SPI_MspInit+0x88>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12f      	bne.n	8001b34 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001ada:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b04:	23a0      	movs	r3, #160	; 0xa0
 8001b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4619      	mov	r1, r3
 8001b16:	480b      	ldr	r0, [pc, #44]	; (8001b44 <HAL_SPI_MspInit+0x90>)
 8001b18:	f000 fb62 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b1c:	2340      	movs	r3, #64	; 0x40
 8001b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <HAL_SPI_MspInit+0x90>)
 8001b30:	f000 fb56 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40013000 	.word	0x40013000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010800 	.word	0x40010800

08001b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_TIM_Base_MspInit+0x34>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10b      	bne.n	8001b72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_TIM_Base_MspInit+0x38>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_TIM_Base_MspInit+0x38>)
 8001b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b64:	6193      	str	r3, [r2, #24]
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_TIM_Base_MspInit+0x38>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <HAL_UART_MspInit+0x9c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d139      	bne.n	8001c18 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4619      	mov	r1, r3
 8001be8:	480f      	ldr	r0, [pc, #60]	; (8001c28 <HAL_UART_MspInit+0xa4>)
 8001bea:	f000 faf9 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <HAL_UART_MspInit+0xa4>)
 8001c04:	f000 faec 	bl	80021e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2025      	movs	r0, #37	; 0x25
 8001c0e:	f000 f9fe 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c12:	2025      	movs	r0, #37	; 0x25
 8001c14:	f000 fa17 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010800 	.word	0x40010800

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c72:	f000 f8b5 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <USART1_IRQHandler+0x10>)
 8001c82:	f002 fd6d 	bl	8004760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000178 	.word	0x20000178

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f003 fa58 	bl	8005174 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 }
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20005000 	.word	0x20005000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	2000072c 	.word	0x2000072c
 8001cf8:	20000880 	.word	0x20000880

08001cfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d08:	f7ff fff8 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d0c:	480b      	ldr	r0, [pc, #44]	; (8001d3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d0e:	490c      	ldr	r1, [pc, #48]	; (8001d40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d24:	4c09      	ldr	r4, [pc, #36]	; (8001d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d32:	f003 fa25 	bl	8005180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d36:	f7fe ffd3 	bl	8000ce0 <main>
  bx lr
 8001d3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d44:	080062f0 	.word	0x080062f0
  ldr r2, =_sbss
 8001d48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d4c:	2000087c 	.word	0x2000087c

08001d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_2_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_Init+0x28>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_Init+0x28>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f947 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6a:	200f      	movs	r0, #15
 8001d6c:	f000 f808 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d70:	f7ff fe30 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40022000 	.word	0x40022000

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x54>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x58>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f95f 	bl	8002062 <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f000 f927 	bl	800200e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <HAL_InitTick+0x5c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	2000000c 	.word	0x2000000c
 8001dd8:	20000014 	.word	0x20000014
 8001ddc:	20000010 	.word	0x20000010

08001de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_IncTick+0x1c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_IncTick+0x20>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <HAL_IncTick+0x20>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000014 	.word	0x20000014
 8001e00:	20000730 	.word	0x20000730

08001e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <HAL_GetTick+0x10>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000730 	.word	0x20000730

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff fff0 	bl	8001e04 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d005      	beq.n	8001e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_Delay+0x44>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3e:	bf00      	nop
 8001e40:	f7ff ffe0 	bl	8001e04 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f7      	bhi.n	8001e40 <HAL_Delay+0x28>
  {
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000014 	.word	0x20000014

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <__NVIC_EnableIRQ+0x34>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100

08001efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	; (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	; (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f1c3 0307 	rsb	r3, r3, #7
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf28      	it	cs
 8001f6e:	2304      	movcs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d902      	bls.n	8001f80 <NVIC_EncodePriority+0x30>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3b03      	subs	r3, #3
 8001f7e:	e000      	b.n	8001f82 <NVIC_EncodePriority+0x32>
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	401a      	ands	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	4313      	orrs	r3, r2
         );
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	; 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f7ff ff90 	bl	8001efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff2d 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff42 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ff90 	bl	8001f50 <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff5f 	bl	8001efc <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff35 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffa2 	bl	8001fb4 <SysTick_Config>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d008      	beq.n	80020a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2204      	movs	r2, #4
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e020      	b.n	80020e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 020e 	bic.w	r2, r2, #14
 80020b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d005      	beq.n	8002114 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2204      	movs	r2, #4
 800210c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e051      	b.n	80021b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020e 	bic.w	r2, r2, #14
 8002122:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <HAL_DMA_Abort_IT+0xd4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d029      	beq.n	8002192 <HAL_DMA_Abort_IT+0xa2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <HAL_DMA_Abort_IT+0xd8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_Abort_IT+0x9e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <HAL_DMA_Abort_IT+0xdc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01a      	beq.n	8002188 <HAL_DMA_Abort_IT+0x98>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_DMA_Abort_IT+0xe0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d012      	beq.n	8002182 <HAL_DMA_Abort_IT+0x92>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_DMA_Abort_IT+0xe4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00a      	beq.n	800217c <HAL_DMA_Abort_IT+0x8c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_DMA_Abort_IT+0xe8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d102      	bne.n	8002176 <HAL_DMA_Abort_IT+0x86>
 8002170:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002174:	e00e      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 8002176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800217a:	e00b      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 800217c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002180:	e008      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 8002182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002186:	e005      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 8002188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218c:	e002      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 800218e:	2310      	movs	r3, #16
 8002190:	e000      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 8002192:	2301      	movs	r3, #1
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_DMA_Abort_IT+0xec>)
 8002196:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
    } 
  }
  return status;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40020008 	.word	0x40020008
 80021c8:	4002001c 	.word	0x4002001c
 80021cc:	40020030 	.word	0x40020030
 80021d0:	40020044 	.word	0x40020044
 80021d4:	40020058 	.word	0x40020058
 80021d8:	4002006c 	.word	0x4002006c
 80021dc:	40020000 	.word	0x40020000

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b08b      	sub	sp, #44	; 0x2c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	e169      	b.n	80024c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021f4:	2201      	movs	r2, #1
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8158 	bne.w	80024c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a9a      	ldr	r2, [pc, #616]	; (8002480 <HAL_GPIO_Init+0x2a0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d05e      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800221c:	4a98      	ldr	r2, [pc, #608]	; (8002480 <HAL_GPIO_Init+0x2a0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d875      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002222:	4a98      	ldr	r2, [pc, #608]	; (8002484 <HAL_GPIO_Init+0x2a4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d058      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002228:	4a96      	ldr	r2, [pc, #600]	; (8002484 <HAL_GPIO_Init+0x2a4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d86f      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800222e:	4a96      	ldr	r2, [pc, #600]	; (8002488 <HAL_GPIO_Init+0x2a8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d052      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002234:	4a94      	ldr	r2, [pc, #592]	; (8002488 <HAL_GPIO_Init+0x2a8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d869      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800223a:	4a94      	ldr	r2, [pc, #592]	; (800248c <HAL_GPIO_Init+0x2ac>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04c      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002240:	4a92      	ldr	r2, [pc, #584]	; (800248c <HAL_GPIO_Init+0x2ac>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d863      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002246:	4a92      	ldr	r2, [pc, #584]	; (8002490 <HAL_GPIO_Init+0x2b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d046      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800224c:	4a90      	ldr	r2, [pc, #576]	; (8002490 <HAL_GPIO_Init+0x2b0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d85d      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002252:	2b12      	cmp	r3, #18
 8002254:	d82a      	bhi.n	80022ac <HAL_GPIO_Init+0xcc>
 8002256:	2b12      	cmp	r3, #18
 8002258:	d859      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800225a:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <HAL_GPIO_Init+0x80>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	080022db 	.word	0x080022db
 8002264:	080022b5 	.word	0x080022b5
 8002268:	080022c7 	.word	0x080022c7
 800226c:	08002309 	.word	0x08002309
 8002270:	0800230f 	.word	0x0800230f
 8002274:	0800230f 	.word	0x0800230f
 8002278:	0800230f 	.word	0x0800230f
 800227c:	0800230f 	.word	0x0800230f
 8002280:	0800230f 	.word	0x0800230f
 8002284:	0800230f 	.word	0x0800230f
 8002288:	0800230f 	.word	0x0800230f
 800228c:	0800230f 	.word	0x0800230f
 8002290:	0800230f 	.word	0x0800230f
 8002294:	0800230f 	.word	0x0800230f
 8002298:	0800230f 	.word	0x0800230f
 800229c:	0800230f 	.word	0x0800230f
 80022a0:	0800230f 	.word	0x0800230f
 80022a4:	080022bd 	.word	0x080022bd
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	4a79      	ldr	r2, [pc, #484]	; (8002494 <HAL_GPIO_Init+0x2b4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022b2:	e02c      	b.n	800230e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	623b      	str	r3, [r7, #32]
          break;
 80022ba:	e029      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	3304      	adds	r3, #4
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e024      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	3308      	adds	r3, #8
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e01f      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	330c      	adds	r3, #12
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e01a      	b.n	8002310 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022e2:	2304      	movs	r3, #4
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e013      	b.n	8002310 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f0:	2308      	movs	r3, #8
 80022f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	611a      	str	r2, [r3, #16]
          break;
 80022fa:	e009      	b.n	8002310 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022fc:	2308      	movs	r3, #8
 80022fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	615a      	str	r2, [r3, #20]
          break;
 8002306:	e003      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x130>
          break;
 800230e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2bff      	cmp	r3, #255	; 0xff
 8002314:	d801      	bhi.n	800231a <HAL_GPIO_Init+0x13a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	e001      	b.n	800231e <HAL_GPIO_Init+0x13e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	d802      	bhi.n	800232c <HAL_GPIO_Init+0x14c>
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	e002      	b.n	8002332 <HAL_GPIO_Init+0x152>
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	3b08      	subs	r3, #8
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	210f      	movs	r1, #15
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	6a39      	ldr	r1, [r7, #32]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	431a      	orrs	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80b1 	beq.w	80024c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_GPIO_Init+0x2b8>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_GPIO_Init+0x2b8>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_GPIO_Init+0x2b8>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002378:	4a48      	ldr	r2, [pc, #288]	; (800249c <HAL_GPIO_Init+0x2bc>)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <HAL_GPIO_Init+0x2c0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_GPIO_Init+0x1ec>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3f      	ldr	r2, [pc, #252]	; (80024a4 <HAL_GPIO_Init+0x2c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00d      	beq.n	80023c8 <HAL_GPIO_Init+0x1e8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3e      	ldr	r2, [pc, #248]	; (80024a8 <HAL_GPIO_Init+0x2c8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3d      	ldr	r2, [pc, #244]	; (80024ac <HAL_GPIO_Init+0x2cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_GPIO_Init+0x1e0>
 80023bc:	2303      	movs	r3, #3
 80023be:	e006      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e004      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023cc:	2300      	movs	r3, #0
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023de:	492f      	ldr	r1, [pc, #188]	; (800249c <HAL_GPIO_Init+0x2bc>)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	492c      	ldr	r1, [pc, #176]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	43db      	mvns	r3, r3
 800240e:	4928      	ldr	r1, [pc, #160]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002410:	4013      	ands	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002420:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4922      	ldr	r1, [pc, #136]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	43db      	mvns	r3, r3
 8002436:	491e      	ldr	r1, [pc, #120]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002438:	4013      	ands	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4918      	ldr	r1, [pc, #96]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	43db      	mvns	r3, r3
 800245e:	4914      	ldr	r1, [pc, #80]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002460:	4013      	ands	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d021      	beq.n	80024b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	490e      	ldr	r1, [pc, #56]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	e021      	b.n	80024c2 <HAL_GPIO_Init+0x2e2>
 800247e:	bf00      	nop
 8002480:	10320000 	.word	0x10320000
 8002484:	10310000 	.word	0x10310000
 8002488:	10220000 	.word	0x10220000
 800248c:	10210000 	.word	0x10210000
 8002490:	10120000 	.word	0x10120000
 8002494:	10110000 	.word	0x10110000
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000
 80024a0:	40010800 	.word	0x40010800
 80024a4:	40010c00 	.word	0x40010c00
 80024a8:	40011000 	.word	0x40011000
 80024ac:	40011400 	.word	0x40011400
 80024b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_GPIO_Init+0x304>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	4909      	ldr	r1, [pc, #36]	; (80024e4 <HAL_GPIO_Init+0x304>)
 80024be:	4013      	ands	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	3301      	adds	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f ae8e 	bne.w	80021f4 <HAL_GPIO_Init+0x14>
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	372c      	adds	r7, #44	; 0x2c
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e001      	b.n	800250a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
 8002522:	4613      	mov	r3, r2
 8002524:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002526:	787b      	ldrb	r3, [r7, #1]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252c:	887a      	ldrh	r2, [r7, #2]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002532:	e003      	b.n	800253c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	041a      	lsls	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	611a      	str	r2, [r3, #16]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
	...

08002548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e12b      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fa62 	bl	8001a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800259a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025ac:	f001 f960 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 80025b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a81      	ldr	r2, [pc, #516]	; (80027bc <HAL_I2C_Init+0x274>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d807      	bhi.n	80025cc <HAL_I2C_Init+0x84>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a80      	ldr	r2, [pc, #512]	; (80027c0 <HAL_I2C_Init+0x278>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e006      	b.n	80025da <HAL_I2C_Init+0x92>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a7d      	ldr	r2, [pc, #500]	; (80027c4 <HAL_I2C_Init+0x27c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0e7      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4a78      	ldr	r2, [pc, #480]	; (80027c8 <HAL_I2C_Init+0x280>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0c9b      	lsrs	r3, r3, #18
 80025ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a6a      	ldr	r2, [pc, #424]	; (80027bc <HAL_I2C_Init+0x274>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d802      	bhi.n	800261c <HAL_I2C_Init+0xd4>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	e009      	b.n	8002630 <HAL_I2C_Init+0xe8>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_I2C_Init+0x284>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	3301      	adds	r3, #1
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	430b      	orrs	r3, r1
 8002636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002642:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	495c      	ldr	r1, [pc, #368]	; (80027bc <HAL_I2C_Init+0x274>)
 800264c:	428b      	cmp	r3, r1
 800264e:	d819      	bhi.n	8002684 <HAL_I2C_Init+0x13c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e59      	subs	r1, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fbb1 f3f3 	udiv	r3, r1, r3
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002664:	400b      	ands	r3, r1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_I2C_Init+0x138>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e59      	subs	r1, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fbb1 f3f3 	udiv	r3, r1, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267e:	e051      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002680:	2304      	movs	r3, #4
 8002682:	e04f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d111      	bne.n	80026b0 <HAL_I2C_Init+0x168>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e58      	subs	r0, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e012      	b.n	80026d6 <HAL_I2C_Init+0x18e>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e58      	subs	r0, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	0099      	lsls	r1, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Init+0x196>
 80026da:	2301      	movs	r3, #1
 80026dc:	e022      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10e      	bne.n	8002704 <HAL_I2C_Init+0x1bc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1e58      	subs	r0, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	440b      	add	r3, r1
 80026f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002702:	e00f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	0099      	lsls	r1, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	fbb0 f3f3 	udiv	r3, r0, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	6809      	ldr	r1, [r1, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6911      	ldr	r1, [r2, #16]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	430b      	orrs	r3, r1
 8002766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	000186a0 	.word	0x000186a0
 80027c0:	001e847f 	.word	0x001e847f
 80027c4:	003d08ff 	.word	0x003d08ff
 80027c8:	431bde83 	.word	0x431bde83
 80027cc:	10624dd3 	.word	0x10624dd3

080027d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	461a      	mov	r2, r3
 80027dc:	460b      	mov	r3, r1
 80027de:	817b      	strh	r3, [r7, #10]
 80027e0:	4613      	mov	r3, r2
 80027e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff fb0e 	bl	8001e04 <HAL_GetTick>
 80027e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	f040 80e0 	bne.w	80029b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2319      	movs	r3, #25
 80027fe:	2201      	movs	r2, #1
 8002800:	4970      	ldr	r1, [pc, #448]	; (80029c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fa92 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	e0d3      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2C_Master_Transmit+0x50>
 800281c:	2302      	movs	r3, #2
 800281e:	e0cc      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d007      	beq.n	8002846 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002854:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2221      	movs	r2, #33	; 0x21
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2210      	movs	r2, #16
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f9ca 	bl	8002c28 <I2C_MasterRequestWrite>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e08d      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028b4:	e066      	b.n	8002984 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	6a39      	ldr	r1, [r7, #32]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fb50 	bl	8002f60 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00d      	beq.n	80028e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d107      	bne.n	80028de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06b      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	781a      	ldrb	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b04      	cmp	r3, #4
 800291e:	d11b      	bne.n	8002958 <HAL_I2C_Master_Transmit+0x188>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d017      	beq.n	8002958 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	6a39      	ldr	r1, [r7, #32]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fb47 	bl	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b04      	cmp	r3, #4
 800296e:	d107      	bne.n	8002980 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e01a      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d194      	bne.n	80028b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e000      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
  }
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	00100002 	.word	0x00100002
 80029c8:	ffff0000 	.word	0xffff0000

080029cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff fa12 	bl	8001e04 <HAL_GetTick>
 80029e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	f040 8111 	bne.w	8002c16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2319      	movs	r3, #25
 80029fa:	2201      	movs	r2, #1
 80029fc:	4988      	ldr	r1, [pc, #544]	; (8002c20 <HAL_I2C_IsDeviceReady+0x254>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f994 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e104      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2C_IsDeviceReady+0x50>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0fd      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x24c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d007      	beq.n	8002a42 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2224      	movs	r2, #36	; 0x24
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a70      	ldr	r2, [pc, #448]	; (8002c24 <HAL_I2C_IsDeviceReady+0x258>)
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f952 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9c:	d103      	bne.n	8002aa6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0b6      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aaa:	897b      	ldrh	r3, [r7, #10]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ab8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002aba:	f7ff f9a3 	bl	8001e04 <HAL_GetTick>
 8002abe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002aee:	e025      	b.n	8002b3c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7ff f988 	bl	8001e04 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <HAL_I2C_IsDeviceReady+0x13a>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	22a0      	movs	r2, #160	; 0xa0
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2ba0      	cmp	r3, #160	; 0xa0
 8002b46:	d005      	beq.n	8002b54 <HAL_I2C_IsDeviceReady+0x188>
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_I2C_IsDeviceReady+0x188>
 8002b4e:	7dbb      	ldrb	r3, [r7, #22]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0cd      	beq.n	8002af0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d129      	bne.n	8002bbe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b78:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2319      	movs	r3, #25
 8002b96:	2201      	movs	r2, #1
 8002b98:	4921      	ldr	r1, [pc, #132]	; (8002c20 <HAL_I2C_IsDeviceReady+0x254>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8c6 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e036      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e02c      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bd6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2319      	movs	r3, #25
 8002bde:	2201      	movs	r2, #1
 8002be0:	490f      	ldr	r1, [pc, #60]	; (8002c20 <HAL_I2C_IsDeviceReady+0x254>)
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f8a2 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e012      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f4ff af32 	bcc.w	8002a66 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
  }
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	00100002 	.word	0x00100002
 8002c24:	ffff0000 	.word	0xffff0000

08002c28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	460b      	mov	r3, r1
 8002c36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d006      	beq.n	8002c52 <I2C_MasterRequestWrite+0x2a>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d003      	beq.n	8002c52 <I2C_MasterRequestWrite+0x2a>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c50:	d108      	bne.n	8002c64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e00b      	b.n	8002c7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	2b12      	cmp	r3, #18
 8002c6a:	d107      	bne.n	8002c7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f84f 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00d      	beq.n	8002cb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca2:	d103      	bne.n	8002cac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e035      	b.n	8002d1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb8:	d108      	bne.n	8002ccc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cba:	897b      	ldrh	r3, [r7, #10]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cc8:	611a      	str	r2, [r3, #16]
 8002cca:	e01b      	b.n	8002d04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ccc:	897b      	ldrh	r3, [r7, #10]
 8002cce:	11db      	asrs	r3, r3, #7
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 0306 	and.w	r3, r3, #6
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f063 030f 	orn	r3, r3, #15
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	490e      	ldr	r1, [pc, #56]	; (8002d24 <I2C_MasterRequestWrite+0xfc>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f898 	bl	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e010      	b.n	8002d1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <I2C_MasterRequestWrite+0x100>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f888 	bl	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	00010008 	.word	0x00010008
 8002d28:	00010002 	.word	0x00010002

08002d2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3c:	e048      	b.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d044      	beq.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7ff f85d 	bl	8001e04 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d139      	bne.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	0c1b      	lsrs	r3, r3, #16
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10d      	bne.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4013      	ands	r3, r2
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	e00c      	b.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d116      	bne.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e023      	b.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	0c1b      	lsrs	r3, r3, #16
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10d      	bne.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	43da      	mvns	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4013      	ands	r3, r2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	e00c      	b.n	8002e10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4013      	ands	r3, r2
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d093      	beq.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e2e:	e071      	b.n	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d123      	bne.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f043 0204 	orr.w	r2, r3, #4
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e067      	b.n	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8e:	d041      	beq.n	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e90:	f7fe ffb8 	bl	8001e04 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d302      	bcc.n	8002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d136      	bne.n	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10c      	bne.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e00b      	b.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e021      	b.n	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	0c1b      	lsrs	r3, r3, #16
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d10c      	bne.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	43da      	mvns	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e00b      	b.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f af6d 	bne.w	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f6c:	e034      	b.n	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f886 	bl	8003080 <I2C_IsAcknowledgeFailed>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e034      	b.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d028      	beq.n	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7fe ff3d 	bl	8001e04 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11d      	bne.n	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b80      	cmp	r3, #128	; 0x80
 8002fa8:	d016      	beq.n	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e007      	b.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d1c3      	bne.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ffc:	e034      	b.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f83e 	bl	8003080 <I2C_IsAcknowledgeFailed>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e034      	b.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d028      	beq.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003016:	f7fe fef5 	bl	8001e04 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d11d      	bne.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d016      	beq.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e007      	b.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d1c3      	bne.n	8002ffe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003096:	d11b      	bne.n	80030d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 0204 	orr.w	r2, r3, #4
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e272      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8087 	beq.w	800320a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fc:	4b92      	ldr	r3, [pc, #584]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	d00c      	beq.n	8003122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003108:	4b8f      	ldr	r3, [pc, #572]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d112      	bne.n	800313a <HAL_RCC_OscConfig+0x5e>
 8003114:	4b8c      	ldr	r3, [pc, #560]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d10b      	bne.n	800313a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003122:	4b89      	ldr	r3, [pc, #548]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d06c      	beq.n	8003208 <HAL_RCC_OscConfig+0x12c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d168      	bne.n	8003208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e24c      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x76>
 8003144:	4b80      	ldr	r3, [pc, #512]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a7f      	ldr	r2, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e02e      	b.n	80031b0 <HAL_RCC_OscConfig+0xd4>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x98>
 800315a:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7a      	ldr	r2, [pc, #488]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b78      	ldr	r3, [pc, #480]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800316c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e01d      	b.n	80031b0 <HAL_RCC_OscConfig+0xd4>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0xbc>
 800317e:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a71      	ldr	r2, [pc, #452]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0xd4>
 8003198:	4b6b      	ldr	r3, [pc, #428]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b68      	ldr	r3, [pc, #416]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a67      	ldr	r2, [pc, #412]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe fe24 	bl	8001e04 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fe20 	bl	8001e04 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e200      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b5d      	ldr	r3, [pc, #372]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe4>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fe10 	bl	8001e04 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fe0c 	bl	8001e04 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1ec      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x10c>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d063      	beq.n	80032de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003216:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003222:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d11c      	bne.n	8003268 <HAL_RCC_OscConfig+0x18c>
 800322e:	4b46      	ldr	r3, [pc, #280]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d116      	bne.n	8003268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x176>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e1c0      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4939      	ldr	r1, [pc, #228]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	e03a      	b.n	80032de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fe fdc5 	bl	8001e04 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327e:	f7fe fdc1 	bl	8001e04 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1a1      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4927      	ldr	r1, [pc, #156]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]
 80032b0:	e015      	b.n	80032de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fda4 	bl	8001e04 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c0:	f7fe fda0 	bl	8001e04 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e180      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03a      	beq.n	8003360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d019      	beq.n	8003326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7fe fd84 	bl	8001e04 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7fe fd80 	bl	8001e04 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e160      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800331e:	2001      	movs	r0, #1
 8003320:	f000 face 	bl	80038c0 <RCC_Delay>
 8003324:	e01c      	b.n	8003360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7fe fd6a 	bl	8001e04 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003332:	e00f      	b.n	8003354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7fe fd66 	bl	8001e04 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d908      	bls.n	8003354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e146      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	42420000 	.word	0x42420000
 8003350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	4b92      	ldr	r3, [pc, #584]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e9      	bne.n	8003334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a6 	beq.w	80034ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003372:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	4b88      	ldr	r3, [pc, #544]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4a87      	ldr	r2, [pc, #540]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	61d3      	str	r3, [r2, #28]
 800338a:	4b85      	ldr	r3, [pc, #532]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	4b82      	ldr	r3, [pc, #520]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d118      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a6:	4b7f      	ldr	r3, [pc, #508]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7e      	ldr	r2, [pc, #504]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b2:	f7fe fd27 	bl	8001e04 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fe fd23 	bl	8001e04 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b64      	cmp	r3, #100	; 0x64
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e103      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	4b75      	ldr	r3, [pc, #468]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x312>
 80033e0:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4a6e      	ldr	r2, [pc, #440]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6213      	str	r3, [r2, #32]
 80033ec:	e02d      	b.n	800344a <HAL_RCC_OscConfig+0x36e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x334>
 80033f6:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a69      	ldr	r2, [pc, #420]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6213      	str	r3, [r2, #32]
 8003402:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a66      	ldr	r2, [pc, #408]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	6213      	str	r3, [r2, #32]
 800340e:	e01c      	b.n	800344a <HAL_RCC_OscConfig+0x36e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b05      	cmp	r3, #5
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_OscConfig+0x356>
 8003418:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4a60      	ldr	r2, [pc, #384]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6213      	str	r3, [r2, #32]
 8003424:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6213      	str	r3, [r2, #32]
 8003430:	e00b      	b.n	800344a <HAL_RCC_OscConfig+0x36e>
 8003432:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a5a      	ldr	r2, [pc, #360]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6213      	str	r3, [r2, #32]
 800343e:	4b58      	ldr	r3, [pc, #352]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003452:	f7fe fcd7 	bl	8001e04 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fe fcd3 	bl	8001e04 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0b1      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ee      	beq.n	800345a <HAL_RCC_OscConfig+0x37e>
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe fcc1 	bl	8001e04 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fcbd 	bl	8001e04 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e09b      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349c:	4b40      	ldr	r3, [pc, #256]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ee      	bne.n	8003486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4a3b      	ldr	r2, [pc, #236]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8087 	beq.w	80035d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d061      	beq.n	8003594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d146      	bne.n	8003566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fc91 	bl	8001e04 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fe fc8d 	bl	8001e04 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e06d      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350c:	d108      	bne.n	8003520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4921      	ldr	r1, [pc, #132]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003520:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a19      	ldr	r1, [r3, #32]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	430b      	orrs	r3, r1
 8003532:	491b      	ldr	r1, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe fc61 	bl	8001e04 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003546:	f7fe fc5d 	bl	8001e04 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e03d      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x46a>
 8003564:	e035      	b.n	80035d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe fc4a 	bl	8001e04 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe fc46 	bl	8001e04 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e026      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x498>
 8003592:	e01e      	b.n	80035d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e019      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40007000 	.word	0x40007000
 80035a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_OscConfig+0x500>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000

080035e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0d0      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d910      	bls.n	8003624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 0207 	bic.w	r2, r3, #7
 800360a:	4965      	ldr	r1, [pc, #404]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b8      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800363c:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a52      	ldr	r2, [pc, #328]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800365e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003660:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	494d      	ldr	r1, [pc, #308]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d040      	beq.n	8003700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d115      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07f      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d107      	bne.n	80036ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e073      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ae:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06b      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036be:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f023 0203 	bic.w	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4936      	ldr	r1, [pc, #216]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d0:	f7fe fb98 	bl	8001e04 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d8:	f7fe fb94 	bl	8001e04 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e053      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 020c 	and.w	r2, r3, #12
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d1eb      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d210      	bcs.n	8003730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	4922      	ldr	r1, [pc, #136]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e032      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4916      	ldr	r1, [pc, #88]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	490e      	ldr	r1, [pc, #56]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800376e:	f000 f821 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003772:	4602      	mov	r2, r0
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	490a      	ldr	r1, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	5ccb      	ldrb	r3, [r1, r3]
 8003782:	fa22 f303 	lsr.w	r3, r2, r3
 8003786:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1cc>)
 8003788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1d0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe faf6 	bl	8001d80 <HAL_InitTick>

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08006280 	.word	0x08006280
 80037ac:	2000000c 	.word	0x2000000c
 80037b0:	20000010 	.word	0x20000010

080037b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_RCC_GetSysClockFreq+0x94>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d002      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x30>
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0x36>
 80037e2:	e027      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 80037e6:	613b      	str	r3, [r7, #16]
      break;
 80037e8:	e027      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0c9b      	lsrs	r3, r3, #18
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	4a17      	ldr	r2, [pc, #92]	; (8003850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037f4:	5cd3      	ldrb	r3, [r2, r3]
 80037f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d010      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <HAL_RCC_GetSysClockFreq+0x94>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	0c5b      	lsrs	r3, r3, #17
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	4a11      	ldr	r2, [pc, #68]	; (8003854 <HAL_RCC_GetSysClockFreq+0xa0>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 8003816:	fb03 f202 	mul.w	r2, r3, r2
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e004      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	613b      	str	r3, [r7, #16]
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 8003836:	613b      	str	r3, [r7, #16]
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	693b      	ldr	r3, [r7, #16]
}
 800383c:	4618      	mov	r0, r3
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	007a1200 	.word	0x007a1200
 8003850:	08006298 	.word	0x08006298
 8003854:	080062a8 	.word	0x080062a8
 8003858:	003d0900 	.word	0x003d0900

0800385c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <HAL_RCC_GetHCLKFreq+0x10>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	2000000c 	.word	0x2000000c

08003870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003874:	f7ff fff2 	bl	800385c <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4903      	ldr	r1, [pc, #12]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	08006290 	.word	0x08006290

08003898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800389c:	f7ff ffde 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	0adb      	lsrs	r3, r3, #11
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08006290 	.word	0x08006290

080038c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <RCC_Delay+0x34>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <RCC_Delay+0x38>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0a5b      	lsrs	r3, r3, #9
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038dc:	bf00      	nop
  }
  while (Delay --);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e5a      	subs	r2, r3, #1
 80038e2:	60fa      	str	r2, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f9      	bne.n	80038dc <RCC_Delay+0x1c>
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	2000000c 	.word	0x2000000c
 80038f8:	10624dd3 	.word	0x10624dd3

080038fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e076      	b.n	80039fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	d108      	bne.n	8003928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800391e:	d009      	beq.n	8003934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
 8003926:	e005      	b.n	8003934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe f8b0 	bl	8001ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b8:	ea42 0103 	orr.w	r1, r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	0c1a      	lsrs	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f002 0204 	and.w	r2, r2, #4
 80039da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_SPI_Transmit+0x22>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e12d      	b.n	8003c82 <HAL_SPI_Transmit+0x27e>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a2e:	f7fe f9e9 	bl	8001e04 <HAL_GetTick>
 8003a32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d002      	beq.n	8003a4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
 8003a46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a48:	e116      	b.n	8003c78 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_SPI_Transmit+0x52>
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a5a:	e10d      	b.n	8003c78 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa2:	d10f      	bne.n	8003ac4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d007      	beq.n	8003ae2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aea:	d14f      	bne.n	8003b8c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_SPI_Transmit+0xf6>
 8003af4:	8afb      	ldrh	r3, [r7, #22]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d142      	bne.n	8003b80 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	1c9a      	adds	r2, r3, #2
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b1e:	e02f      	b.n	8003b80 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d112      	bne.n	8003b54 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b52:	e015      	b.n	8003b80 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b54:	f7fe f956 	bl	8001e04 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d803      	bhi.n	8003b6c <HAL_SPI_Transmit+0x168>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d102      	bne.n	8003b72 <HAL_SPI_Transmit+0x16e>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003b7e:	e07b      	b.n	8003c78 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ca      	bne.n	8003b20 <HAL_SPI_Transmit+0x11c>
 8003b8a:	e050      	b.n	8003c2e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_SPI_Transmit+0x196>
 8003b94:	8afb      	ldrh	r3, [r7, #22]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d144      	bne.n	8003c24 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	7812      	ldrb	r2, [r2, #0]
 8003ba6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bc0:	e030      	b.n	8003c24 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d113      	bne.n	8003bf8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bf6:	e015      	b.n	8003c24 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf8:	f7fe f904 	bl	8001e04 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d803      	bhi.n	8003c10 <HAL_SPI_Transmit+0x20c>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d102      	bne.n	8003c16 <HAL_SPI_Transmit+0x212>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c22:	e029      	b.n	8003c78 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1c9      	bne.n	8003bc2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	6839      	ldr	r1, [r7, #0]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fa6e 	bl	8004114 <SPI_EndRxTxTransaction>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	77fb      	strb	r3, [r7, #31]
 8003c6e:	e003      	b.n	8003c78 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b08c      	sub	sp, #48	; 0x30
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_SPI_TransmitReceive+0x26>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e198      	b.n	8003fe2 <HAL_SPI_TransmitReceive+0x358>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb8:	f7fe f8a4 	bl	8001e04 <HAL_GetTick>
 8003cbc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d00f      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x70>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce0:	d107      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x68>
 8003cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d003      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cf8:	e16d      	b.n	8003fd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0x82>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0x82>
 8003d06:	887b      	ldrh	r3, [r7, #2]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d103      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d12:	e160      	b.n	8003fd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d003      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2205      	movs	r2, #5
 8003d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	887a      	ldrh	r2, [r7, #2]
 8003d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	887a      	ldrh	r2, [r7, #2]
 8003d4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d007      	beq.n	8003d7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	d17c      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x10a>
 8003d8e:	8b7b      	ldrh	r3, [r7, #26]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d16a      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db8:	e057      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d11b      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x176>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x176>
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d113      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d119      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x1b8>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d014      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	b292      	uxth	r2, r2
 8003e24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	1c9a      	adds	r2, r3, #2
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e42:	f7fd ffdf 	bl	8001e04 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d80b      	bhi.n	8003e6a <HAL_SPI_TransmitReceive+0x1e0>
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d007      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003e68:	e0b5      	b.n	8003fd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1a2      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x130>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d19d      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x130>
 8003e7e:	e080      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0x204>
 8003e88:	8b7b      	ldrh	r3, [r7, #26]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d16f      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb4:	e05b      	b.n	8003f6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d11c      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x274>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d017      	beq.n	8003efe <HAL_SPI_TransmitReceive+0x274>
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d114      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d119      	bne.n	8003f40 <HAL_SPI_TransmitReceive+0x2b6>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d014      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f40:	f7fd ff60 	bl	8001e04 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d803      	bhi.n	8003f58 <HAL_SPI_TransmitReceive+0x2ce>
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d102      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x2d4>
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003f6c:	e033      	b.n	8003fd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d19e      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x22c>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d199      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f8c4 	bl	8004114 <SPI_EndRxTxTransaction>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f9e:	e01a      	b.n	8003fd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fcc:	e003      	b.n	8003fd6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3730      	adds	r7, #48	; 0x30
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff8:	b2db      	uxtb	r3, r3
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004014:	f7fd fef6 	bl	8001e04 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	4413      	add	r3, r2
 8004022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004024:	f7fd feee 	bl	8001e04 <HAL_GetTick>
 8004028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800402a:	4b39      	ldr	r3, [pc, #228]	; (8004110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	015b      	lsls	r3, r3, #5
 8004030:	0d1b      	lsrs	r3, r3, #20
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403a:	e054      	b.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d050      	beq.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004044:	f7fd fede 	bl	8001e04 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	429a      	cmp	r2, r3
 8004052:	d902      	bls.n	800405a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d13d      	bne.n	80040d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004072:	d111      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407c:	d004      	beq.n	8004088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004086:	d107      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a0:	d10f      	bne.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e017      	b.n	8004106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	429a      	cmp	r2, r3
 8004102:	d19b      	bne.n	800403c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	2000000c 	.word	0x2000000c

08004114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff ff6a 	bl	8004004 <SPI_WaitFlagStateUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e000      	b.n	8004148 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e041      	b.n	80041e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd fce6 	bl	8001b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f000 f940 	bl	8004414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d001      	beq.n	8004208 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e032      	b.n	800426e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_TIM_Base_Start+0x88>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00e      	beq.n	8004238 <HAL_TIM_Base_Start+0x48>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004222:	d009      	beq.n	8004238 <HAL_TIM_Base_Start+0x48>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a14      	ldr	r2, [pc, #80]	; (800427c <HAL_TIM_Base_Start+0x8c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <HAL_TIM_Base_Start+0x48>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a13      	ldr	r2, [pc, #76]	; (8004280 <HAL_TIM_Base_Start+0x90>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d111      	bne.n	800425c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b06      	cmp	r3, #6
 8004248:	d010      	beq.n	800426c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	e007      	b.n	800426c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	40012c00 	.word	0x40012c00
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800

08004284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_TIM_ConfigClockSource+0x1c>
 800429c:	2302      	movs	r3, #2
 800429e:	e0b4      	b.n	800440a <HAL_TIM_ConfigClockSource+0x186>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d8:	d03e      	beq.n	8004358 <HAL_TIM_ConfigClockSource+0xd4>
 80042da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042de:	f200 8087 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x16c>
 80042e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e6:	f000 8086 	beq.w	80043f6 <HAL_TIM_ConfigClockSource+0x172>
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ee:	d87f      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x16c>
 80042f0:	2b70      	cmp	r3, #112	; 0x70
 80042f2:	d01a      	beq.n	800432a <HAL_TIM_ConfigClockSource+0xa6>
 80042f4:	2b70      	cmp	r3, #112	; 0x70
 80042f6:	d87b      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b60      	cmp	r3, #96	; 0x60
 80042fa:	d050      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x11a>
 80042fc:	2b60      	cmp	r3, #96	; 0x60
 80042fe:	d877      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004300:	2b50      	cmp	r3, #80	; 0x50
 8004302:	d03c      	beq.n	800437e <HAL_TIM_ConfigClockSource+0xfa>
 8004304:	2b50      	cmp	r3, #80	; 0x50
 8004306:	d873      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d058      	beq.n	80043be <HAL_TIM_ConfigClockSource+0x13a>
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d86f      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004310:	2b30      	cmp	r3, #48	; 0x30
 8004312:	d064      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x15a>
 8004314:	2b30      	cmp	r3, #48	; 0x30
 8004316:	d86b      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004318:	2b20      	cmp	r3, #32
 800431a:	d060      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x15a>
 800431c:	2b20      	cmp	r3, #32
 800431e:	d867      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d05c      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x15a>
 8004324:	2b10      	cmp	r3, #16
 8004326:	d05a      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x15a>
 8004328:	e062      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800433a:	f000 f944 	bl	80045c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800434c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	609a      	str	r2, [r3, #8]
      break;
 8004356:	e04f      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004368:	f000 f92d 	bl	80045c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800437a:	609a      	str	r2, [r3, #8]
      break;
 800437c:	e03c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800438a:	461a      	mov	r2, r3
 800438c:	f000 f8a4 	bl	80044d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2150      	movs	r1, #80	; 0x50
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f8fb 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 800439c:	e02c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043aa:	461a      	mov	r2, r3
 80043ac:	f000 f8c2 	bl	8004534 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2160      	movs	r1, #96	; 0x60
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f8eb 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 80043bc:	e01c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 f884 	bl	80044d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2140      	movs	r1, #64	; 0x40
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f8db 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e00c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f000 f8d2 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 80043ee:	e003      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	e000      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a29      	ldr	r2, [pc, #164]	; (80044cc <TIM_Base_SetConfig+0xb8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00b      	beq.n	8004444 <TIM_Base_SetConfig+0x30>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004432:	d007      	beq.n	8004444 <TIM_Base_SetConfig+0x30>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a26      	ldr	r2, [pc, #152]	; (80044d0 <TIM_Base_SetConfig+0xbc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d003      	beq.n	8004444 <TIM_Base_SetConfig+0x30>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a25      	ldr	r2, [pc, #148]	; (80044d4 <TIM_Base_SetConfig+0xc0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d108      	bne.n	8004456 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <TIM_Base_SetConfig+0xb8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_Base_SetConfig+0x62>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004464:	d007      	beq.n	8004476 <TIM_Base_SetConfig+0x62>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <TIM_Base_SetConfig+0xbc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_Base_SetConfig+0x62>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <TIM_Base_SetConfig+0xc0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d108      	bne.n	8004488 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a07      	ldr	r2, [pc, #28]	; (80044cc <TIM_Base_SetConfig+0xb8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d103      	bne.n	80044bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	615a      	str	r2, [r3, #20]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800

080044d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f023 0201 	bic.w	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 030a 	bic.w	r3, r3, #10
 8004514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f023 0210 	bic.w	r2, r3, #16
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800455e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	031b      	lsls	r3, r3, #12
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004570:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f043 0307 	orr.w	r3, r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b087      	sub	sp, #28
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	021a      	lsls	r2, r3, #8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	609a      	str	r2, [r3, #8]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004618:	2302      	movs	r3, #2
 800461a:	e046      	b.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00e      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004668:	d009      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a10      	ldr	r2, [pc, #64]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d10c      	bne.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4313      	orrs	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800

080046c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e042      	b.n	8004758 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fd fa4c 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	; 0x24
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fc7f 	bl	8005008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b0ba      	sub	sp, #232	; 0xe8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800478c:	2300      	movs	r3, #0
 800478e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800479e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_UART_IRQHandler+0x66>
 80047b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fb63 	bl	8004e8a <UART_Receive_IT>
      return;
 80047c4:	e25b      	b.n	8004c7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80de 	beq.w	800498c <HAL_UART_IRQHandler+0x22c>
 80047d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80d1 	beq.w	800498c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_UART_IRQHandler+0xae>
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	f043 0201 	orr.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800480e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_UART_IRQHandler+0xd2>
 800481a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f043 0202 	orr.w	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_UART_IRQHandler+0xf6>
 800483e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f043 0204 	orr.w	r2, r3, #4
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d011      	beq.n	8004886 <HAL_UART_IRQHandler+0x126>
 8004862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800486e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	f043 0208 	orr.w	r2, r3, #8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 81f2 	beq.w	8004c74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_UART_IRQHandler+0x14e>
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 faee 	bl	8004e8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <HAL_UART_IRQHandler+0x17a>
 80048d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d04f      	beq.n	800497a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9f8 	bl	8004cd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d041      	beq.n	8004972 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3314      	adds	r3, #20
 80048f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3314      	adds	r3, #20
 8004916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800491a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800491e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1d9      	bne.n	80048ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d013      	beq.n	800496a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	4a7e      	ldr	r2, [pc, #504]	; (8004b40 <HAL_UART_IRQHandler+0x3e0>)
 8004948:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	4618      	mov	r0, r3
 8004950:	f7fd fbce 	bl	80020f0 <HAL_DMA_Abort_IT>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d016      	beq.n	8004988 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004964:	4610      	mov	r0, r2
 8004966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	e00e      	b.n	8004988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f99c 	bl	8004ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	e00a      	b.n	8004988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f998 	bl	8004ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	e006      	b.n	8004988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f994 	bl	8004ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004986:	e175      	b.n	8004c74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	bf00      	nop
    return;
 800498a:	e173      	b.n	8004c74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	2b01      	cmp	r3, #1
 8004992:	f040 814f 	bne.w	8004c34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8148 	beq.w	8004c34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8141 	beq.w	8004c34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049b2:	2300      	movs	r3, #0
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80b6 	beq.w	8004b44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8145 	beq.w	8004c78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049f6:	429a      	cmp	r2, r3
 80049f8:	f080 813e 	bcs.w	8004c78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	f000 8088 	beq.w	8004b20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a3c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1d9      	bne.n	8004a10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3314      	adds	r3, #20
 8004a62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3314      	adds	r3, #20
 8004a7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e1      	bne.n	8004a5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004abc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004abe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ac2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004aca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e3      	bne.n	8004a98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af0:	f023 0310 	bic.w	r3, r3, #16
 8004af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b02:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b04:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e3      	bne.n	8004ade <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fd faad 	bl	800207a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f8bf 	bl	8004cba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b3c:	e09c      	b.n	8004c78 <HAL_UART_IRQHandler+0x518>
 8004b3e:	bf00      	nop
 8004b40:	08004d95 	.word	0x08004d95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 808e 	beq.w	8004c7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8089 	beq.w	8004c7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b8e:	647a      	str	r2, [r7, #68]	; 0x44
 8004b90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e3      	bne.n	8004b6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3314      	adds	r3, #20
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3314      	adds	r3, #20
 8004bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bc6:	633a      	str	r2, [r7, #48]	; 0x30
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e3      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0310 	bic.w	r3, r3, #16
 8004bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c0c:	61fa      	str	r2, [r7, #28]
 8004c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	69b9      	ldr	r1, [r7, #24]
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e3      	bne.n	8004be8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f844 	bl	8004cba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c32:	e023      	b.n	8004c7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d009      	beq.n	8004c54 <HAL_UART_IRQHandler+0x4f4>
 8004c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f8b5 	bl	8004dbc <UART_Transmit_IT>
    return;
 8004c52:	e014      	b.n	8004c7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00e      	beq.n	8004c7e <HAL_UART_IRQHandler+0x51e>
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f8f4 	bl	8004e5a <UART_EndTransmit_IT>
    return;
 8004c72:	e004      	b.n	8004c7e <HAL_UART_IRQHandler+0x51e>
    return;
 8004c74:	bf00      	nop
 8004c76:	e002      	b.n	8004c7e <HAL_UART_IRQHandler+0x51e>
      return;
 8004c78:	bf00      	nop
 8004c7a:	e000      	b.n	8004c7e <HAL_UART_IRQHandler+0x51e>
      return;
 8004c7c:	bf00      	nop
  }
}
 8004c7e:	37e8      	adds	r7, #232	; 0xe8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr

08004cba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b095      	sub	sp, #84	; 0x54
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cf8:	643a      	str	r2, [r7, #64]	; 0x40
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3314      	adds	r3, #20
 8004d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e5      	bne.n	8004d0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d119      	bne.n	8004d7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f023 0310 	bic.w	r3, r3, #16
 8004d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d68:	61ba      	str	r2, [r7, #24]
 8004d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6979      	ldr	r1, [r7, #20]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	613b      	str	r3, [r7, #16]
   return(result);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e5      	bne.n	8004d48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d8a:	bf00      	nop
 8004d8c:	3754      	adds	r7, #84	; 0x54
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff ff7a 	bl	8004ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b21      	cmp	r3, #33	; 0x21
 8004dce:	d13e      	bne.n	8004e4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd8:	d114      	bne.n	8004e04 <UART_Transmit_IT+0x48>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d110      	bne.n	8004e04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	1c9a      	adds	r2, r3, #2
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	621a      	str	r2, [r3, #32]
 8004e02:	e008      	b.n	8004e16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	1c59      	adds	r1, r3, #1
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6211      	str	r1, [r2, #32]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4619      	mov	r1, r3
 8004e24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e4e:	2302      	movs	r3, #2
  }
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr

08004e5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff ff02 	bl	8004c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b08c      	sub	sp, #48	; 0x30
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b22      	cmp	r3, #34	; 0x22
 8004e9c:	f040 80ae 	bne.w	8004ffc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea8:	d117      	bne.n	8004eda <UART_Receive_IT+0x50>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d113      	bne.n	8004eda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	1c9a      	adds	r2, r3, #2
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ed8:	e026      	b.n	8004f28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eec:	d007      	beq.n	8004efe <UART_Receive_IT+0x74>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <UART_Receive_IT+0x82>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e008      	b.n	8004f1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4619      	mov	r1, r3
 8004f36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d15d      	bne.n	8004ff8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0220 	bic.w	r2, r2, #32
 8004f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d135      	bne.n	8004fee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	613b      	str	r3, [r7, #16]
   return(result);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f023 0310 	bic.w	r3, r3, #16
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa8:	623a      	str	r2, [r7, #32]
 8004faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	69f9      	ldr	r1, [r7, #28]
 8004fae:	6a3a      	ldr	r2, [r7, #32]
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e5      	bne.n	8004f88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d10a      	bne.n	8004fe0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff fe67 	bl	8004cba <HAL_UARTEx_RxEventCallback>
 8004fec:	e002      	b.n	8004ff4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fe51 	bl	8004c96 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e002      	b.n	8004ffe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3730      	adds	r7, #48	; 0x30
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005042:	f023 030c 	bic.w	r3, r3, #12
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	430b      	orrs	r3, r1
 800504e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a2c      	ldr	r2, [pc, #176]	; (800511c <UART_SetConfig+0x114>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d103      	bne.n	8005078 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005070:	f7fe fc12 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	e002      	b.n	800507e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fe fbfa 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 800507c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009a      	lsls	r2, r3, #2
 8005088:	441a      	add	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	4a22      	ldr	r2, [pc, #136]	; (8005120 <UART_SetConfig+0x118>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	0119      	lsls	r1, r3, #4
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009a      	lsls	r2, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b4:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <UART_SetConfig+0x118>)
 80050b6:	fba3 0302 	umull	r0, r3, r3, r2
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	2064      	movs	r0, #100	; 0x64
 80050be:	fb00 f303 	mul.w	r3, r0, r3
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	3332      	adds	r3, #50	; 0x32
 80050c8:	4a15      	ldr	r2, [pc, #84]	; (8005120 <UART_SetConfig+0x118>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d4:	4419      	add	r1, r3
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009a      	lsls	r2, r3, #2
 80050e0:	441a      	add	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050ec:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <UART_SetConfig+0x118>)
 80050ee:	fba3 0302 	umull	r0, r3, r3, r2
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	2064      	movs	r0, #100	; 0x64
 80050f6:	fb00 f303 	mul.w	r3, r0, r3
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	3332      	adds	r3, #50	; 0x32
 8005100:	4a07      	ldr	r2, [pc, #28]	; (8005120 <UART_SetConfig+0x118>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	f003 020f 	and.w	r2, r3, #15
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	440a      	add	r2, r1
 8005112:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40013800 	.word	0x40013800
 8005120:	51eb851f 	.word	0x51eb851f

08005124 <siprintf>:
 8005124:	b40e      	push	{r1, r2, r3}
 8005126:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800512a:	b500      	push	{lr}
 800512c:	b09c      	sub	sp, #112	; 0x70
 800512e:	ab1d      	add	r3, sp, #116	; 0x74
 8005130:	9002      	str	r0, [sp, #8]
 8005132:	9006      	str	r0, [sp, #24]
 8005134:	9107      	str	r1, [sp, #28]
 8005136:	9104      	str	r1, [sp, #16]
 8005138:	4808      	ldr	r0, [pc, #32]	; (800515c <siprintf+0x38>)
 800513a:	4909      	ldr	r1, [pc, #36]	; (8005160 <siprintf+0x3c>)
 800513c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005140:	9105      	str	r1, [sp, #20]
 8005142:	6800      	ldr	r0, [r0, #0]
 8005144:	a902      	add	r1, sp, #8
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	f000 f99c 	bl	8005484 <_svfiprintf_r>
 800514c:	2200      	movs	r2, #0
 800514e:	9b02      	ldr	r3, [sp, #8]
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	b01c      	add	sp, #112	; 0x70
 8005154:	f85d eb04 	ldr.w	lr, [sp], #4
 8005158:	b003      	add	sp, #12
 800515a:	4770      	bx	lr
 800515c:	20000064 	.word	0x20000064
 8005160:	ffff0208 	.word	0xffff0208

08005164 <memset>:
 8005164:	4603      	mov	r3, r0
 8005166:	4402      	add	r2, r0
 8005168:	4293      	cmp	r3, r2
 800516a:	d100      	bne.n	800516e <memset+0xa>
 800516c:	4770      	bx	lr
 800516e:	f803 1b01 	strb.w	r1, [r3], #1
 8005172:	e7f9      	b.n	8005168 <memset+0x4>

08005174 <__errno>:
 8005174:	4b01      	ldr	r3, [pc, #4]	; (800517c <__errno+0x8>)
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000064 	.word	0x20000064

08005180 <__libc_init_array>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	2600      	movs	r6, #0
 8005184:	4d0c      	ldr	r5, [pc, #48]	; (80051b8 <__libc_init_array+0x38>)
 8005186:	4c0d      	ldr	r4, [pc, #52]	; (80051bc <__libc_init_array+0x3c>)
 8005188:	1b64      	subs	r4, r4, r5
 800518a:	10a4      	asrs	r4, r4, #2
 800518c:	42a6      	cmp	r6, r4
 800518e:	d109      	bne.n	80051a4 <__libc_init_array+0x24>
 8005190:	f000 fc7a 	bl	8005a88 <_init>
 8005194:	2600      	movs	r6, #0
 8005196:	4d0a      	ldr	r5, [pc, #40]	; (80051c0 <__libc_init_array+0x40>)
 8005198:	4c0a      	ldr	r4, [pc, #40]	; (80051c4 <__libc_init_array+0x44>)
 800519a:	1b64      	subs	r4, r4, r5
 800519c:	10a4      	asrs	r4, r4, #2
 800519e:	42a6      	cmp	r6, r4
 80051a0:	d105      	bne.n	80051ae <__libc_init_array+0x2e>
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
 80051a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a8:	4798      	blx	r3
 80051aa:	3601      	adds	r6, #1
 80051ac:	e7ee      	b.n	800518c <__libc_init_array+0xc>
 80051ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b2:	4798      	blx	r3
 80051b4:	3601      	adds	r6, #1
 80051b6:	e7f2      	b.n	800519e <__libc_init_array+0x1e>
 80051b8:	080062e8 	.word	0x080062e8
 80051bc:	080062e8 	.word	0x080062e8
 80051c0:	080062e8 	.word	0x080062e8
 80051c4:	080062ec 	.word	0x080062ec

080051c8 <__retarget_lock_acquire_recursive>:
 80051c8:	4770      	bx	lr

080051ca <__retarget_lock_release_recursive>:
 80051ca:	4770      	bx	lr

080051cc <memcpy>:
 80051cc:	440a      	add	r2, r1
 80051ce:	4291      	cmp	r1, r2
 80051d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80051d4:	d100      	bne.n	80051d8 <memcpy+0xc>
 80051d6:	4770      	bx	lr
 80051d8:	b510      	push	{r4, lr}
 80051da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051de:	4291      	cmp	r1, r2
 80051e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051e4:	d1f9      	bne.n	80051da <memcpy+0xe>
 80051e6:	bd10      	pop	{r4, pc}

080051e8 <_free_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4605      	mov	r5, r0
 80051ec:	2900      	cmp	r1, #0
 80051ee:	d040      	beq.n	8005272 <_free_r+0x8a>
 80051f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f4:	1f0c      	subs	r4, r1, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bfb8      	it	lt
 80051fa:	18e4      	addlt	r4, r4, r3
 80051fc:	f000 f8dc 	bl	80053b8 <__malloc_lock>
 8005200:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <_free_r+0x8c>)
 8005202:	6813      	ldr	r3, [r2, #0]
 8005204:	b933      	cbnz	r3, 8005214 <_free_r+0x2c>
 8005206:	6063      	str	r3, [r4, #4]
 8005208:	6014      	str	r4, [r2, #0]
 800520a:	4628      	mov	r0, r5
 800520c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005210:	f000 b8d8 	b.w	80053c4 <__malloc_unlock>
 8005214:	42a3      	cmp	r3, r4
 8005216:	d908      	bls.n	800522a <_free_r+0x42>
 8005218:	6820      	ldr	r0, [r4, #0]
 800521a:	1821      	adds	r1, r4, r0
 800521c:	428b      	cmp	r3, r1
 800521e:	bf01      	itttt	eq
 8005220:	6819      	ldreq	r1, [r3, #0]
 8005222:	685b      	ldreq	r3, [r3, #4]
 8005224:	1809      	addeq	r1, r1, r0
 8005226:	6021      	streq	r1, [r4, #0]
 8005228:	e7ed      	b.n	8005206 <_free_r+0x1e>
 800522a:	461a      	mov	r2, r3
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	b10b      	cbz	r3, 8005234 <_free_r+0x4c>
 8005230:	42a3      	cmp	r3, r4
 8005232:	d9fa      	bls.n	800522a <_free_r+0x42>
 8005234:	6811      	ldr	r1, [r2, #0]
 8005236:	1850      	adds	r0, r2, r1
 8005238:	42a0      	cmp	r0, r4
 800523a:	d10b      	bne.n	8005254 <_free_r+0x6c>
 800523c:	6820      	ldr	r0, [r4, #0]
 800523e:	4401      	add	r1, r0
 8005240:	1850      	adds	r0, r2, r1
 8005242:	4283      	cmp	r3, r0
 8005244:	6011      	str	r1, [r2, #0]
 8005246:	d1e0      	bne.n	800520a <_free_r+0x22>
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4408      	add	r0, r1
 800524e:	6010      	str	r0, [r2, #0]
 8005250:	6053      	str	r3, [r2, #4]
 8005252:	e7da      	b.n	800520a <_free_r+0x22>
 8005254:	d902      	bls.n	800525c <_free_r+0x74>
 8005256:	230c      	movs	r3, #12
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	e7d6      	b.n	800520a <_free_r+0x22>
 800525c:	6820      	ldr	r0, [r4, #0]
 800525e:	1821      	adds	r1, r4, r0
 8005260:	428b      	cmp	r3, r1
 8005262:	bf01      	itttt	eq
 8005264:	6819      	ldreq	r1, [r3, #0]
 8005266:	685b      	ldreq	r3, [r3, #4]
 8005268:	1809      	addeq	r1, r1, r0
 800526a:	6021      	streq	r1, [r4, #0]
 800526c:	6063      	str	r3, [r4, #4]
 800526e:	6054      	str	r4, [r2, #4]
 8005270:	e7cb      	b.n	800520a <_free_r+0x22>
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	20000874 	.word	0x20000874

08005278 <sbrk_aligned>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4e0e      	ldr	r6, [pc, #56]	; (80052b4 <sbrk_aligned+0x3c>)
 800527c:	460c      	mov	r4, r1
 800527e:	6831      	ldr	r1, [r6, #0]
 8005280:	4605      	mov	r5, r0
 8005282:	b911      	cbnz	r1, 800528a <sbrk_aligned+0x12>
 8005284:	f000 fbaa 	bl	80059dc <_sbrk_r>
 8005288:	6030      	str	r0, [r6, #0]
 800528a:	4621      	mov	r1, r4
 800528c:	4628      	mov	r0, r5
 800528e:	f000 fba5 	bl	80059dc <_sbrk_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	d00a      	beq.n	80052ac <sbrk_aligned+0x34>
 8005296:	1cc4      	adds	r4, r0, #3
 8005298:	f024 0403 	bic.w	r4, r4, #3
 800529c:	42a0      	cmp	r0, r4
 800529e:	d007      	beq.n	80052b0 <sbrk_aligned+0x38>
 80052a0:	1a21      	subs	r1, r4, r0
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 fb9a 	bl	80059dc <_sbrk_r>
 80052a8:	3001      	adds	r0, #1
 80052aa:	d101      	bne.n	80052b0 <sbrk_aligned+0x38>
 80052ac:	f04f 34ff 	mov.w	r4, #4294967295
 80052b0:	4620      	mov	r0, r4
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	20000878 	.word	0x20000878

080052b8 <_malloc_r>:
 80052b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052bc:	1ccd      	adds	r5, r1, #3
 80052be:	f025 0503 	bic.w	r5, r5, #3
 80052c2:	3508      	adds	r5, #8
 80052c4:	2d0c      	cmp	r5, #12
 80052c6:	bf38      	it	cc
 80052c8:	250c      	movcc	r5, #12
 80052ca:	2d00      	cmp	r5, #0
 80052cc:	4607      	mov	r7, r0
 80052ce:	db01      	blt.n	80052d4 <_malloc_r+0x1c>
 80052d0:	42a9      	cmp	r1, r5
 80052d2:	d905      	bls.n	80052e0 <_malloc_r+0x28>
 80052d4:	230c      	movs	r3, #12
 80052d6:	2600      	movs	r6, #0
 80052d8:	603b      	str	r3, [r7, #0]
 80052da:	4630      	mov	r0, r6
 80052dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053b4 <_malloc_r+0xfc>
 80052e4:	f000 f868 	bl	80053b8 <__malloc_lock>
 80052e8:	f8d8 3000 	ldr.w	r3, [r8]
 80052ec:	461c      	mov	r4, r3
 80052ee:	bb5c      	cbnz	r4, 8005348 <_malloc_r+0x90>
 80052f0:	4629      	mov	r1, r5
 80052f2:	4638      	mov	r0, r7
 80052f4:	f7ff ffc0 	bl	8005278 <sbrk_aligned>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	4604      	mov	r4, r0
 80052fc:	d155      	bne.n	80053aa <_malloc_r+0xf2>
 80052fe:	f8d8 4000 	ldr.w	r4, [r8]
 8005302:	4626      	mov	r6, r4
 8005304:	2e00      	cmp	r6, #0
 8005306:	d145      	bne.n	8005394 <_malloc_r+0xdc>
 8005308:	2c00      	cmp	r4, #0
 800530a:	d048      	beq.n	800539e <_malloc_r+0xe6>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	4631      	mov	r1, r6
 8005310:	4638      	mov	r0, r7
 8005312:	eb04 0903 	add.w	r9, r4, r3
 8005316:	f000 fb61 	bl	80059dc <_sbrk_r>
 800531a:	4581      	cmp	r9, r0
 800531c:	d13f      	bne.n	800539e <_malloc_r+0xe6>
 800531e:	6821      	ldr	r1, [r4, #0]
 8005320:	4638      	mov	r0, r7
 8005322:	1a6d      	subs	r5, r5, r1
 8005324:	4629      	mov	r1, r5
 8005326:	f7ff ffa7 	bl	8005278 <sbrk_aligned>
 800532a:	3001      	adds	r0, #1
 800532c:	d037      	beq.n	800539e <_malloc_r+0xe6>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	442b      	add	r3, r5
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	f8d8 3000 	ldr.w	r3, [r8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d038      	beq.n	80053ae <_malloc_r+0xf6>
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	42a2      	cmp	r2, r4
 8005340:	d12b      	bne.n	800539a <_malloc_r+0xe2>
 8005342:	2200      	movs	r2, #0
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	e00f      	b.n	8005368 <_malloc_r+0xb0>
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	1b52      	subs	r2, r2, r5
 800534c:	d41f      	bmi.n	800538e <_malloc_r+0xd6>
 800534e:	2a0b      	cmp	r2, #11
 8005350:	d917      	bls.n	8005382 <_malloc_r+0xca>
 8005352:	1961      	adds	r1, r4, r5
 8005354:	42a3      	cmp	r3, r4
 8005356:	6025      	str	r5, [r4, #0]
 8005358:	bf18      	it	ne
 800535a:	6059      	strne	r1, [r3, #4]
 800535c:	6863      	ldr	r3, [r4, #4]
 800535e:	bf08      	it	eq
 8005360:	f8c8 1000 	streq.w	r1, [r8]
 8005364:	5162      	str	r2, [r4, r5]
 8005366:	604b      	str	r3, [r1, #4]
 8005368:	4638      	mov	r0, r7
 800536a:	f104 060b 	add.w	r6, r4, #11
 800536e:	f000 f829 	bl	80053c4 <__malloc_unlock>
 8005372:	f026 0607 	bic.w	r6, r6, #7
 8005376:	1d23      	adds	r3, r4, #4
 8005378:	1af2      	subs	r2, r6, r3
 800537a:	d0ae      	beq.n	80052da <_malloc_r+0x22>
 800537c:	1b9b      	subs	r3, r3, r6
 800537e:	50a3      	str	r3, [r4, r2]
 8005380:	e7ab      	b.n	80052da <_malloc_r+0x22>
 8005382:	42a3      	cmp	r3, r4
 8005384:	6862      	ldr	r2, [r4, #4]
 8005386:	d1dd      	bne.n	8005344 <_malloc_r+0x8c>
 8005388:	f8c8 2000 	str.w	r2, [r8]
 800538c:	e7ec      	b.n	8005368 <_malloc_r+0xb0>
 800538e:	4623      	mov	r3, r4
 8005390:	6864      	ldr	r4, [r4, #4]
 8005392:	e7ac      	b.n	80052ee <_malloc_r+0x36>
 8005394:	4634      	mov	r4, r6
 8005396:	6876      	ldr	r6, [r6, #4]
 8005398:	e7b4      	b.n	8005304 <_malloc_r+0x4c>
 800539a:	4613      	mov	r3, r2
 800539c:	e7cc      	b.n	8005338 <_malloc_r+0x80>
 800539e:	230c      	movs	r3, #12
 80053a0:	4638      	mov	r0, r7
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	f000 f80e 	bl	80053c4 <__malloc_unlock>
 80053a8:	e797      	b.n	80052da <_malloc_r+0x22>
 80053aa:	6025      	str	r5, [r4, #0]
 80053ac:	e7dc      	b.n	8005368 <_malloc_r+0xb0>
 80053ae:	605b      	str	r3, [r3, #4]
 80053b0:	deff      	udf	#255	; 0xff
 80053b2:	bf00      	nop
 80053b4:	20000874 	.word	0x20000874

080053b8 <__malloc_lock>:
 80053b8:	4801      	ldr	r0, [pc, #4]	; (80053c0 <__malloc_lock+0x8>)
 80053ba:	f7ff bf05 	b.w	80051c8 <__retarget_lock_acquire_recursive>
 80053be:	bf00      	nop
 80053c0:	20000870 	.word	0x20000870

080053c4 <__malloc_unlock>:
 80053c4:	4801      	ldr	r0, [pc, #4]	; (80053cc <__malloc_unlock+0x8>)
 80053c6:	f7ff bf00 	b.w	80051ca <__retarget_lock_release_recursive>
 80053ca:	bf00      	nop
 80053cc:	20000870 	.word	0x20000870

080053d0 <__ssputs_r>:
 80053d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	461f      	mov	r7, r3
 80053d6:	688e      	ldr	r6, [r1, #8]
 80053d8:	4682      	mov	sl, r0
 80053da:	42be      	cmp	r6, r7
 80053dc:	460c      	mov	r4, r1
 80053de:	4690      	mov	r8, r2
 80053e0:	680b      	ldr	r3, [r1, #0]
 80053e2:	d82c      	bhi.n	800543e <__ssputs_r+0x6e>
 80053e4:	898a      	ldrh	r2, [r1, #12]
 80053e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053ea:	d026      	beq.n	800543a <__ssputs_r+0x6a>
 80053ec:	6965      	ldr	r5, [r4, #20]
 80053ee:	6909      	ldr	r1, [r1, #16]
 80053f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053f4:	eba3 0901 	sub.w	r9, r3, r1
 80053f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053fc:	1c7b      	adds	r3, r7, #1
 80053fe:	444b      	add	r3, r9
 8005400:	106d      	asrs	r5, r5, #1
 8005402:	429d      	cmp	r5, r3
 8005404:	bf38      	it	cc
 8005406:	461d      	movcc	r5, r3
 8005408:	0553      	lsls	r3, r2, #21
 800540a:	d527      	bpl.n	800545c <__ssputs_r+0x8c>
 800540c:	4629      	mov	r1, r5
 800540e:	f7ff ff53 	bl	80052b8 <_malloc_r>
 8005412:	4606      	mov	r6, r0
 8005414:	b360      	cbz	r0, 8005470 <__ssputs_r+0xa0>
 8005416:	464a      	mov	r2, r9
 8005418:	6921      	ldr	r1, [r4, #16]
 800541a:	f7ff fed7 	bl	80051cc <memcpy>
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005428:	81a3      	strh	r3, [r4, #12]
 800542a:	6126      	str	r6, [r4, #16]
 800542c:	444e      	add	r6, r9
 800542e:	6026      	str	r6, [r4, #0]
 8005430:	463e      	mov	r6, r7
 8005432:	6165      	str	r5, [r4, #20]
 8005434:	eba5 0509 	sub.w	r5, r5, r9
 8005438:	60a5      	str	r5, [r4, #8]
 800543a:	42be      	cmp	r6, r7
 800543c:	d900      	bls.n	8005440 <__ssputs_r+0x70>
 800543e:	463e      	mov	r6, r7
 8005440:	4632      	mov	r2, r6
 8005442:	4641      	mov	r1, r8
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	f000 faaf 	bl	80059a8 <memmove>
 800544a:	2000      	movs	r0, #0
 800544c:	68a3      	ldr	r3, [r4, #8]
 800544e:	1b9b      	subs	r3, r3, r6
 8005450:	60a3      	str	r3, [r4, #8]
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	4433      	add	r3, r6
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545c:	462a      	mov	r2, r5
 800545e:	f000 fadb 	bl	8005a18 <_realloc_r>
 8005462:	4606      	mov	r6, r0
 8005464:	2800      	cmp	r0, #0
 8005466:	d1e0      	bne.n	800542a <__ssputs_r+0x5a>
 8005468:	4650      	mov	r0, sl
 800546a:	6921      	ldr	r1, [r4, #16]
 800546c:	f7ff febc 	bl	80051e8 <_free_r>
 8005470:	230c      	movs	r3, #12
 8005472:	f8ca 3000 	str.w	r3, [sl]
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	f04f 30ff 	mov.w	r0, #4294967295
 800547c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005480:	81a3      	strh	r3, [r4, #12]
 8005482:	e7e9      	b.n	8005458 <__ssputs_r+0x88>

08005484 <_svfiprintf_r>:
 8005484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005488:	4698      	mov	r8, r3
 800548a:	898b      	ldrh	r3, [r1, #12]
 800548c:	4607      	mov	r7, r0
 800548e:	061b      	lsls	r3, r3, #24
 8005490:	460d      	mov	r5, r1
 8005492:	4614      	mov	r4, r2
 8005494:	b09d      	sub	sp, #116	; 0x74
 8005496:	d50e      	bpl.n	80054b6 <_svfiprintf_r+0x32>
 8005498:	690b      	ldr	r3, [r1, #16]
 800549a:	b963      	cbnz	r3, 80054b6 <_svfiprintf_r+0x32>
 800549c:	2140      	movs	r1, #64	; 0x40
 800549e:	f7ff ff0b 	bl	80052b8 <_malloc_r>
 80054a2:	6028      	str	r0, [r5, #0]
 80054a4:	6128      	str	r0, [r5, #16]
 80054a6:	b920      	cbnz	r0, 80054b2 <_svfiprintf_r+0x2e>
 80054a8:	230c      	movs	r3, #12
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	e0d0      	b.n	8005654 <_svfiprintf_r+0x1d0>
 80054b2:	2340      	movs	r3, #64	; 0x40
 80054b4:	616b      	str	r3, [r5, #20]
 80054b6:	2300      	movs	r3, #0
 80054b8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ba:	2320      	movs	r3, #32
 80054bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054c0:	2330      	movs	r3, #48	; 0x30
 80054c2:	f04f 0901 	mov.w	r9, #1
 80054c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800566c <_svfiprintf_r+0x1e8>
 80054ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054d2:	4623      	mov	r3, r4
 80054d4:	469a      	mov	sl, r3
 80054d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054da:	b10a      	cbz	r2, 80054e0 <_svfiprintf_r+0x5c>
 80054dc:	2a25      	cmp	r2, #37	; 0x25
 80054de:	d1f9      	bne.n	80054d4 <_svfiprintf_r+0x50>
 80054e0:	ebba 0b04 	subs.w	fp, sl, r4
 80054e4:	d00b      	beq.n	80054fe <_svfiprintf_r+0x7a>
 80054e6:	465b      	mov	r3, fp
 80054e8:	4622      	mov	r2, r4
 80054ea:	4629      	mov	r1, r5
 80054ec:	4638      	mov	r0, r7
 80054ee:	f7ff ff6f 	bl	80053d0 <__ssputs_r>
 80054f2:	3001      	adds	r0, #1
 80054f4:	f000 80a9 	beq.w	800564a <_svfiprintf_r+0x1c6>
 80054f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054fa:	445a      	add	r2, fp
 80054fc:	9209      	str	r2, [sp, #36]	; 0x24
 80054fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80a1 	beq.w	800564a <_svfiprintf_r+0x1c6>
 8005508:	2300      	movs	r3, #0
 800550a:	f04f 32ff 	mov.w	r2, #4294967295
 800550e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005512:	f10a 0a01 	add.w	sl, sl, #1
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	9307      	str	r3, [sp, #28]
 800551a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800551e:	931a      	str	r3, [sp, #104]	; 0x68
 8005520:	4654      	mov	r4, sl
 8005522:	2205      	movs	r2, #5
 8005524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005528:	4850      	ldr	r0, [pc, #320]	; (800566c <_svfiprintf_r+0x1e8>)
 800552a:	f000 fa67 	bl	80059fc <memchr>
 800552e:	9a04      	ldr	r2, [sp, #16]
 8005530:	b9d8      	cbnz	r0, 800556a <_svfiprintf_r+0xe6>
 8005532:	06d0      	lsls	r0, r2, #27
 8005534:	bf44      	itt	mi
 8005536:	2320      	movmi	r3, #32
 8005538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800553c:	0711      	lsls	r1, r2, #28
 800553e:	bf44      	itt	mi
 8005540:	232b      	movmi	r3, #43	; 0x2b
 8005542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005546:	f89a 3000 	ldrb.w	r3, [sl]
 800554a:	2b2a      	cmp	r3, #42	; 0x2a
 800554c:	d015      	beq.n	800557a <_svfiprintf_r+0xf6>
 800554e:	4654      	mov	r4, sl
 8005550:	2000      	movs	r0, #0
 8005552:	f04f 0c0a 	mov.w	ip, #10
 8005556:	9a07      	ldr	r2, [sp, #28]
 8005558:	4621      	mov	r1, r4
 800555a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800555e:	3b30      	subs	r3, #48	; 0x30
 8005560:	2b09      	cmp	r3, #9
 8005562:	d94d      	bls.n	8005600 <_svfiprintf_r+0x17c>
 8005564:	b1b0      	cbz	r0, 8005594 <_svfiprintf_r+0x110>
 8005566:	9207      	str	r2, [sp, #28]
 8005568:	e014      	b.n	8005594 <_svfiprintf_r+0x110>
 800556a:	eba0 0308 	sub.w	r3, r0, r8
 800556e:	fa09 f303 	lsl.w	r3, r9, r3
 8005572:	4313      	orrs	r3, r2
 8005574:	46a2      	mov	sl, r4
 8005576:	9304      	str	r3, [sp, #16]
 8005578:	e7d2      	b.n	8005520 <_svfiprintf_r+0x9c>
 800557a:	9b03      	ldr	r3, [sp, #12]
 800557c:	1d19      	adds	r1, r3, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	9103      	str	r1, [sp, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	bfbb      	ittet	lt
 8005586:	425b      	neglt	r3, r3
 8005588:	f042 0202 	orrlt.w	r2, r2, #2
 800558c:	9307      	strge	r3, [sp, #28]
 800558e:	9307      	strlt	r3, [sp, #28]
 8005590:	bfb8      	it	lt
 8005592:	9204      	strlt	r2, [sp, #16]
 8005594:	7823      	ldrb	r3, [r4, #0]
 8005596:	2b2e      	cmp	r3, #46	; 0x2e
 8005598:	d10c      	bne.n	80055b4 <_svfiprintf_r+0x130>
 800559a:	7863      	ldrb	r3, [r4, #1]
 800559c:	2b2a      	cmp	r3, #42	; 0x2a
 800559e:	d134      	bne.n	800560a <_svfiprintf_r+0x186>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	3402      	adds	r4, #2
 80055a4:	1d1a      	adds	r2, r3, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	9203      	str	r2, [sp, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bfb8      	it	lt
 80055ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80055b2:	9305      	str	r3, [sp, #20]
 80055b4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005670 <_svfiprintf_r+0x1ec>
 80055b8:	2203      	movs	r2, #3
 80055ba:	4650      	mov	r0, sl
 80055bc:	7821      	ldrb	r1, [r4, #0]
 80055be:	f000 fa1d 	bl	80059fc <memchr>
 80055c2:	b138      	cbz	r0, 80055d4 <_svfiprintf_r+0x150>
 80055c4:	2240      	movs	r2, #64	; 0x40
 80055c6:	9b04      	ldr	r3, [sp, #16]
 80055c8:	eba0 000a 	sub.w	r0, r0, sl
 80055cc:	4082      	lsls	r2, r0
 80055ce:	4313      	orrs	r3, r2
 80055d0:	3401      	adds	r4, #1
 80055d2:	9304      	str	r3, [sp, #16]
 80055d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d8:	2206      	movs	r2, #6
 80055da:	4826      	ldr	r0, [pc, #152]	; (8005674 <_svfiprintf_r+0x1f0>)
 80055dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055e0:	f000 fa0c 	bl	80059fc <memchr>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d038      	beq.n	800565a <_svfiprintf_r+0x1d6>
 80055e8:	4b23      	ldr	r3, [pc, #140]	; (8005678 <_svfiprintf_r+0x1f4>)
 80055ea:	bb1b      	cbnz	r3, 8005634 <_svfiprintf_r+0x1b0>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	3307      	adds	r3, #7
 80055f0:	f023 0307 	bic.w	r3, r3, #7
 80055f4:	3308      	adds	r3, #8
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055fa:	4433      	add	r3, r6
 80055fc:	9309      	str	r3, [sp, #36]	; 0x24
 80055fe:	e768      	b.n	80054d2 <_svfiprintf_r+0x4e>
 8005600:	460c      	mov	r4, r1
 8005602:	2001      	movs	r0, #1
 8005604:	fb0c 3202 	mla	r2, ip, r2, r3
 8005608:	e7a6      	b.n	8005558 <_svfiprintf_r+0xd4>
 800560a:	2300      	movs	r3, #0
 800560c:	f04f 0c0a 	mov.w	ip, #10
 8005610:	4619      	mov	r1, r3
 8005612:	3401      	adds	r4, #1
 8005614:	9305      	str	r3, [sp, #20]
 8005616:	4620      	mov	r0, r4
 8005618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800561c:	3a30      	subs	r2, #48	; 0x30
 800561e:	2a09      	cmp	r2, #9
 8005620:	d903      	bls.n	800562a <_svfiprintf_r+0x1a6>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0c6      	beq.n	80055b4 <_svfiprintf_r+0x130>
 8005626:	9105      	str	r1, [sp, #20]
 8005628:	e7c4      	b.n	80055b4 <_svfiprintf_r+0x130>
 800562a:	4604      	mov	r4, r0
 800562c:	2301      	movs	r3, #1
 800562e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005632:	e7f0      	b.n	8005616 <_svfiprintf_r+0x192>
 8005634:	ab03      	add	r3, sp, #12
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	462a      	mov	r2, r5
 800563a:	4638      	mov	r0, r7
 800563c:	4b0f      	ldr	r3, [pc, #60]	; (800567c <_svfiprintf_r+0x1f8>)
 800563e:	a904      	add	r1, sp, #16
 8005640:	f3af 8000 	nop.w
 8005644:	1c42      	adds	r2, r0, #1
 8005646:	4606      	mov	r6, r0
 8005648:	d1d6      	bne.n	80055f8 <_svfiprintf_r+0x174>
 800564a:	89ab      	ldrh	r3, [r5, #12]
 800564c:	065b      	lsls	r3, r3, #25
 800564e:	f53f af2d 	bmi.w	80054ac <_svfiprintf_r+0x28>
 8005652:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005654:	b01d      	add	sp, #116	; 0x74
 8005656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565a:	ab03      	add	r3, sp, #12
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	462a      	mov	r2, r5
 8005660:	4638      	mov	r0, r7
 8005662:	4b06      	ldr	r3, [pc, #24]	; (800567c <_svfiprintf_r+0x1f8>)
 8005664:	a904      	add	r1, sp, #16
 8005666:	f000 f87d 	bl	8005764 <_printf_i>
 800566a:	e7eb      	b.n	8005644 <_svfiprintf_r+0x1c0>
 800566c:	080062aa 	.word	0x080062aa
 8005670:	080062b0 	.word	0x080062b0
 8005674:	080062b4 	.word	0x080062b4
 8005678:	00000000 	.word	0x00000000
 800567c:	080053d1 	.word	0x080053d1

08005680 <_printf_common>:
 8005680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005684:	4616      	mov	r6, r2
 8005686:	4699      	mov	r9, r3
 8005688:	688a      	ldr	r2, [r1, #8]
 800568a:	690b      	ldr	r3, [r1, #16]
 800568c:	4607      	mov	r7, r0
 800568e:	4293      	cmp	r3, r2
 8005690:	bfb8      	it	lt
 8005692:	4613      	movlt	r3, r2
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800569a:	460c      	mov	r4, r1
 800569c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a0:	b10a      	cbz	r2, 80056a6 <_printf_common+0x26>
 80056a2:	3301      	adds	r3, #1
 80056a4:	6033      	str	r3, [r6, #0]
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	0699      	lsls	r1, r3, #26
 80056aa:	bf42      	ittt	mi
 80056ac:	6833      	ldrmi	r3, [r6, #0]
 80056ae:	3302      	addmi	r3, #2
 80056b0:	6033      	strmi	r3, [r6, #0]
 80056b2:	6825      	ldr	r5, [r4, #0]
 80056b4:	f015 0506 	ands.w	r5, r5, #6
 80056b8:	d106      	bne.n	80056c8 <_printf_common+0x48>
 80056ba:	f104 0a19 	add.w	sl, r4, #25
 80056be:	68e3      	ldr	r3, [r4, #12]
 80056c0:	6832      	ldr	r2, [r6, #0]
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	42ab      	cmp	r3, r5
 80056c6:	dc2b      	bgt.n	8005720 <_printf_common+0xa0>
 80056c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056cc:	1e13      	subs	r3, r2, #0
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	bf18      	it	ne
 80056d2:	2301      	movne	r3, #1
 80056d4:	0692      	lsls	r2, r2, #26
 80056d6:	d430      	bmi.n	800573a <_printf_common+0xba>
 80056d8:	4649      	mov	r1, r9
 80056da:	4638      	mov	r0, r7
 80056dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056e0:	47c0      	blx	r8
 80056e2:	3001      	adds	r0, #1
 80056e4:	d023      	beq.n	800572e <_printf_common+0xae>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	6922      	ldr	r2, [r4, #16]
 80056ea:	f003 0306 	and.w	r3, r3, #6
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	bf14      	ite	ne
 80056f2:	2500      	movne	r5, #0
 80056f4:	6833      	ldreq	r3, [r6, #0]
 80056f6:	f04f 0600 	mov.w	r6, #0
 80056fa:	bf08      	it	eq
 80056fc:	68e5      	ldreq	r5, [r4, #12]
 80056fe:	f104 041a 	add.w	r4, r4, #26
 8005702:	bf08      	it	eq
 8005704:	1aed      	subeq	r5, r5, r3
 8005706:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800570a:	bf08      	it	eq
 800570c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005710:	4293      	cmp	r3, r2
 8005712:	bfc4      	itt	gt
 8005714:	1a9b      	subgt	r3, r3, r2
 8005716:	18ed      	addgt	r5, r5, r3
 8005718:	42b5      	cmp	r5, r6
 800571a:	d11a      	bne.n	8005752 <_printf_common+0xd2>
 800571c:	2000      	movs	r0, #0
 800571e:	e008      	b.n	8005732 <_printf_common+0xb2>
 8005720:	2301      	movs	r3, #1
 8005722:	4652      	mov	r2, sl
 8005724:	4649      	mov	r1, r9
 8005726:	4638      	mov	r0, r7
 8005728:	47c0      	blx	r8
 800572a:	3001      	adds	r0, #1
 800572c:	d103      	bne.n	8005736 <_printf_common+0xb6>
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005736:	3501      	adds	r5, #1
 8005738:	e7c1      	b.n	80056be <_printf_common+0x3e>
 800573a:	2030      	movs	r0, #48	; 0x30
 800573c:	18e1      	adds	r1, r4, r3
 800573e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005748:	4422      	add	r2, r4
 800574a:	3302      	adds	r3, #2
 800574c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005750:	e7c2      	b.n	80056d8 <_printf_common+0x58>
 8005752:	2301      	movs	r3, #1
 8005754:	4622      	mov	r2, r4
 8005756:	4649      	mov	r1, r9
 8005758:	4638      	mov	r0, r7
 800575a:	47c0      	blx	r8
 800575c:	3001      	adds	r0, #1
 800575e:	d0e6      	beq.n	800572e <_printf_common+0xae>
 8005760:	3601      	adds	r6, #1
 8005762:	e7d9      	b.n	8005718 <_printf_common+0x98>

08005764 <_printf_i>:
 8005764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005768:	7e0f      	ldrb	r7, [r1, #24]
 800576a:	4691      	mov	r9, r2
 800576c:	2f78      	cmp	r7, #120	; 0x78
 800576e:	4680      	mov	r8, r0
 8005770:	460c      	mov	r4, r1
 8005772:	469a      	mov	sl, r3
 8005774:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800577a:	d807      	bhi.n	800578c <_printf_i+0x28>
 800577c:	2f62      	cmp	r7, #98	; 0x62
 800577e:	d80a      	bhi.n	8005796 <_printf_i+0x32>
 8005780:	2f00      	cmp	r7, #0
 8005782:	f000 80d5 	beq.w	8005930 <_printf_i+0x1cc>
 8005786:	2f58      	cmp	r7, #88	; 0x58
 8005788:	f000 80c1 	beq.w	800590e <_printf_i+0x1aa>
 800578c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005794:	e03a      	b.n	800580c <_printf_i+0xa8>
 8005796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800579a:	2b15      	cmp	r3, #21
 800579c:	d8f6      	bhi.n	800578c <_printf_i+0x28>
 800579e:	a101      	add	r1, pc, #4	; (adr r1, 80057a4 <_printf_i+0x40>)
 80057a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057a4:	080057fd 	.word	0x080057fd
 80057a8:	08005811 	.word	0x08005811
 80057ac:	0800578d 	.word	0x0800578d
 80057b0:	0800578d 	.word	0x0800578d
 80057b4:	0800578d 	.word	0x0800578d
 80057b8:	0800578d 	.word	0x0800578d
 80057bc:	08005811 	.word	0x08005811
 80057c0:	0800578d 	.word	0x0800578d
 80057c4:	0800578d 	.word	0x0800578d
 80057c8:	0800578d 	.word	0x0800578d
 80057cc:	0800578d 	.word	0x0800578d
 80057d0:	08005917 	.word	0x08005917
 80057d4:	0800583d 	.word	0x0800583d
 80057d8:	080058d1 	.word	0x080058d1
 80057dc:	0800578d 	.word	0x0800578d
 80057e0:	0800578d 	.word	0x0800578d
 80057e4:	08005939 	.word	0x08005939
 80057e8:	0800578d 	.word	0x0800578d
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	0800578d 	.word	0x0800578d
 80057f4:	0800578d 	.word	0x0800578d
 80057f8:	080058d9 	.word	0x080058d9
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	1d1a      	adds	r2, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	602a      	str	r2, [r5, #0]
 8005804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800580c:	2301      	movs	r3, #1
 800580e:	e0a0      	b.n	8005952 <_printf_i+0x1ee>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	682b      	ldr	r3, [r5, #0]
 8005814:	0607      	lsls	r7, r0, #24
 8005816:	f103 0104 	add.w	r1, r3, #4
 800581a:	6029      	str	r1, [r5, #0]
 800581c:	d501      	bpl.n	8005822 <_printf_i+0xbe>
 800581e:	681e      	ldr	r6, [r3, #0]
 8005820:	e003      	b.n	800582a <_printf_i+0xc6>
 8005822:	0646      	lsls	r6, r0, #25
 8005824:	d5fb      	bpl.n	800581e <_printf_i+0xba>
 8005826:	f9b3 6000 	ldrsh.w	r6, [r3]
 800582a:	2e00      	cmp	r6, #0
 800582c:	da03      	bge.n	8005836 <_printf_i+0xd2>
 800582e:	232d      	movs	r3, #45	; 0x2d
 8005830:	4276      	negs	r6, r6
 8005832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005836:	230a      	movs	r3, #10
 8005838:	4859      	ldr	r0, [pc, #356]	; (80059a0 <_printf_i+0x23c>)
 800583a:	e012      	b.n	8005862 <_printf_i+0xfe>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	6820      	ldr	r0, [r4, #0]
 8005840:	1d19      	adds	r1, r3, #4
 8005842:	6029      	str	r1, [r5, #0]
 8005844:	0605      	lsls	r5, r0, #24
 8005846:	d501      	bpl.n	800584c <_printf_i+0xe8>
 8005848:	681e      	ldr	r6, [r3, #0]
 800584a:	e002      	b.n	8005852 <_printf_i+0xee>
 800584c:	0641      	lsls	r1, r0, #25
 800584e:	d5fb      	bpl.n	8005848 <_printf_i+0xe4>
 8005850:	881e      	ldrh	r6, [r3, #0]
 8005852:	2f6f      	cmp	r7, #111	; 0x6f
 8005854:	bf0c      	ite	eq
 8005856:	2308      	moveq	r3, #8
 8005858:	230a      	movne	r3, #10
 800585a:	4851      	ldr	r0, [pc, #324]	; (80059a0 <_printf_i+0x23c>)
 800585c:	2100      	movs	r1, #0
 800585e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005862:	6865      	ldr	r5, [r4, #4]
 8005864:	2d00      	cmp	r5, #0
 8005866:	bfa8      	it	ge
 8005868:	6821      	ldrge	r1, [r4, #0]
 800586a:	60a5      	str	r5, [r4, #8]
 800586c:	bfa4      	itt	ge
 800586e:	f021 0104 	bicge.w	r1, r1, #4
 8005872:	6021      	strge	r1, [r4, #0]
 8005874:	b90e      	cbnz	r6, 800587a <_printf_i+0x116>
 8005876:	2d00      	cmp	r5, #0
 8005878:	d04b      	beq.n	8005912 <_printf_i+0x1ae>
 800587a:	4615      	mov	r5, r2
 800587c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005880:	fb03 6711 	mls	r7, r3, r1, r6
 8005884:	5dc7      	ldrb	r7, [r0, r7]
 8005886:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800588a:	4637      	mov	r7, r6
 800588c:	42bb      	cmp	r3, r7
 800588e:	460e      	mov	r6, r1
 8005890:	d9f4      	bls.n	800587c <_printf_i+0x118>
 8005892:	2b08      	cmp	r3, #8
 8005894:	d10b      	bne.n	80058ae <_printf_i+0x14a>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	07de      	lsls	r6, r3, #31
 800589a:	d508      	bpl.n	80058ae <_printf_i+0x14a>
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	6861      	ldr	r1, [r4, #4]
 80058a0:	4299      	cmp	r1, r3
 80058a2:	bfde      	ittt	le
 80058a4:	2330      	movle	r3, #48	; 0x30
 80058a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058ae:	1b52      	subs	r2, r2, r5
 80058b0:	6122      	str	r2, [r4, #16]
 80058b2:	464b      	mov	r3, r9
 80058b4:	4621      	mov	r1, r4
 80058b6:	4640      	mov	r0, r8
 80058b8:	f8cd a000 	str.w	sl, [sp]
 80058bc:	aa03      	add	r2, sp, #12
 80058be:	f7ff fedf 	bl	8005680 <_printf_common>
 80058c2:	3001      	adds	r0, #1
 80058c4:	d14a      	bne.n	800595c <_printf_i+0x1f8>
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ca:	b004      	add	sp, #16
 80058cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	f043 0320 	orr.w	r3, r3, #32
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	2778      	movs	r7, #120	; 0x78
 80058da:	4832      	ldr	r0, [pc, #200]	; (80059a4 <_printf_i+0x240>)
 80058dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	6829      	ldr	r1, [r5, #0]
 80058e4:	061f      	lsls	r7, r3, #24
 80058e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80058ea:	d402      	bmi.n	80058f2 <_printf_i+0x18e>
 80058ec:	065f      	lsls	r7, r3, #25
 80058ee:	bf48      	it	mi
 80058f0:	b2b6      	uxthmi	r6, r6
 80058f2:	07df      	lsls	r7, r3, #31
 80058f4:	bf48      	it	mi
 80058f6:	f043 0320 	orrmi.w	r3, r3, #32
 80058fa:	6029      	str	r1, [r5, #0]
 80058fc:	bf48      	it	mi
 80058fe:	6023      	strmi	r3, [r4, #0]
 8005900:	b91e      	cbnz	r6, 800590a <_printf_i+0x1a6>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f023 0320 	bic.w	r3, r3, #32
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	2310      	movs	r3, #16
 800590c:	e7a6      	b.n	800585c <_printf_i+0xf8>
 800590e:	4824      	ldr	r0, [pc, #144]	; (80059a0 <_printf_i+0x23c>)
 8005910:	e7e4      	b.n	80058dc <_printf_i+0x178>
 8005912:	4615      	mov	r5, r2
 8005914:	e7bd      	b.n	8005892 <_printf_i+0x12e>
 8005916:	682b      	ldr	r3, [r5, #0]
 8005918:	6826      	ldr	r6, [r4, #0]
 800591a:	1d18      	adds	r0, r3, #4
 800591c:	6961      	ldr	r1, [r4, #20]
 800591e:	6028      	str	r0, [r5, #0]
 8005920:	0635      	lsls	r5, r6, #24
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	d501      	bpl.n	800592a <_printf_i+0x1c6>
 8005926:	6019      	str	r1, [r3, #0]
 8005928:	e002      	b.n	8005930 <_printf_i+0x1cc>
 800592a:	0670      	lsls	r0, r6, #25
 800592c:	d5fb      	bpl.n	8005926 <_printf_i+0x1c2>
 800592e:	8019      	strh	r1, [r3, #0]
 8005930:	2300      	movs	r3, #0
 8005932:	4615      	mov	r5, r2
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	e7bc      	b.n	80058b2 <_printf_i+0x14e>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	2100      	movs	r1, #0
 800593c:	1d1a      	adds	r2, r3, #4
 800593e:	602a      	str	r2, [r5, #0]
 8005940:	681d      	ldr	r5, [r3, #0]
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	4628      	mov	r0, r5
 8005946:	f000 f859 	bl	80059fc <memchr>
 800594a:	b108      	cbz	r0, 8005950 <_printf_i+0x1ec>
 800594c:	1b40      	subs	r0, r0, r5
 800594e:	6060      	str	r0, [r4, #4]
 8005950:	6863      	ldr	r3, [r4, #4]
 8005952:	6123      	str	r3, [r4, #16]
 8005954:	2300      	movs	r3, #0
 8005956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800595a:	e7aa      	b.n	80058b2 <_printf_i+0x14e>
 800595c:	462a      	mov	r2, r5
 800595e:	4649      	mov	r1, r9
 8005960:	4640      	mov	r0, r8
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	47d0      	blx	sl
 8005966:	3001      	adds	r0, #1
 8005968:	d0ad      	beq.n	80058c6 <_printf_i+0x162>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	079b      	lsls	r3, r3, #30
 800596e:	d413      	bmi.n	8005998 <_printf_i+0x234>
 8005970:	68e0      	ldr	r0, [r4, #12]
 8005972:	9b03      	ldr	r3, [sp, #12]
 8005974:	4298      	cmp	r0, r3
 8005976:	bfb8      	it	lt
 8005978:	4618      	movlt	r0, r3
 800597a:	e7a6      	b.n	80058ca <_printf_i+0x166>
 800597c:	2301      	movs	r3, #1
 800597e:	4632      	mov	r2, r6
 8005980:	4649      	mov	r1, r9
 8005982:	4640      	mov	r0, r8
 8005984:	47d0      	blx	sl
 8005986:	3001      	adds	r0, #1
 8005988:	d09d      	beq.n	80058c6 <_printf_i+0x162>
 800598a:	3501      	adds	r5, #1
 800598c:	68e3      	ldr	r3, [r4, #12]
 800598e:	9903      	ldr	r1, [sp, #12]
 8005990:	1a5b      	subs	r3, r3, r1
 8005992:	42ab      	cmp	r3, r5
 8005994:	dcf2      	bgt.n	800597c <_printf_i+0x218>
 8005996:	e7eb      	b.n	8005970 <_printf_i+0x20c>
 8005998:	2500      	movs	r5, #0
 800599a:	f104 0619 	add.w	r6, r4, #25
 800599e:	e7f5      	b.n	800598c <_printf_i+0x228>
 80059a0:	080062bb 	.word	0x080062bb
 80059a4:	080062cc 	.word	0x080062cc

080059a8 <memmove>:
 80059a8:	4288      	cmp	r0, r1
 80059aa:	b510      	push	{r4, lr}
 80059ac:	eb01 0402 	add.w	r4, r1, r2
 80059b0:	d902      	bls.n	80059b8 <memmove+0x10>
 80059b2:	4284      	cmp	r4, r0
 80059b4:	4623      	mov	r3, r4
 80059b6:	d807      	bhi.n	80059c8 <memmove+0x20>
 80059b8:	1e43      	subs	r3, r0, #1
 80059ba:	42a1      	cmp	r1, r4
 80059bc:	d008      	beq.n	80059d0 <memmove+0x28>
 80059be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059c6:	e7f8      	b.n	80059ba <memmove+0x12>
 80059c8:	4601      	mov	r1, r0
 80059ca:	4402      	add	r2, r0
 80059cc:	428a      	cmp	r2, r1
 80059ce:	d100      	bne.n	80059d2 <memmove+0x2a>
 80059d0:	bd10      	pop	{r4, pc}
 80059d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059da:	e7f7      	b.n	80059cc <memmove+0x24>

080059dc <_sbrk_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	2300      	movs	r3, #0
 80059e0:	4d05      	ldr	r5, [pc, #20]	; (80059f8 <_sbrk_r+0x1c>)
 80059e2:	4604      	mov	r4, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	602b      	str	r3, [r5, #0]
 80059e8:	f7fc f952 	bl	8001c90 <_sbrk>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_sbrk_r+0x1a>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_sbrk_r+0x1a>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	2000086c 	.word	0x2000086c

080059fc <memchr>:
 80059fc:	4603      	mov	r3, r0
 80059fe:	b510      	push	{r4, lr}
 8005a00:	b2c9      	uxtb	r1, r1
 8005a02:	4402      	add	r2, r0
 8005a04:	4293      	cmp	r3, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	d101      	bne.n	8005a0e <memchr+0x12>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e003      	b.n	8005a16 <memchr+0x1a>
 8005a0e:	7804      	ldrb	r4, [r0, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	428c      	cmp	r4, r1
 8005a14:	d1f6      	bne.n	8005a04 <memchr+0x8>
 8005a16:	bd10      	pop	{r4, pc}

08005a18 <_realloc_r>:
 8005a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1c:	4680      	mov	r8, r0
 8005a1e:	4614      	mov	r4, r2
 8005a20:	460e      	mov	r6, r1
 8005a22:	b921      	cbnz	r1, 8005a2e <_realloc_r+0x16>
 8005a24:	4611      	mov	r1, r2
 8005a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2a:	f7ff bc45 	b.w	80052b8 <_malloc_r>
 8005a2e:	b92a      	cbnz	r2, 8005a3c <_realloc_r+0x24>
 8005a30:	f7ff fbda 	bl	80051e8 <_free_r>
 8005a34:	4625      	mov	r5, r4
 8005a36:	4628      	mov	r0, r5
 8005a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a3c:	f000 f81b 	bl	8005a76 <_malloc_usable_size_r>
 8005a40:	4284      	cmp	r4, r0
 8005a42:	4607      	mov	r7, r0
 8005a44:	d802      	bhi.n	8005a4c <_realloc_r+0x34>
 8005a46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a4a:	d812      	bhi.n	8005a72 <_realloc_r+0x5a>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4640      	mov	r0, r8
 8005a50:	f7ff fc32 	bl	80052b8 <_malloc_r>
 8005a54:	4605      	mov	r5, r0
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d0ed      	beq.n	8005a36 <_realloc_r+0x1e>
 8005a5a:	42bc      	cmp	r4, r7
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	4631      	mov	r1, r6
 8005a60:	bf28      	it	cs
 8005a62:	463a      	movcs	r2, r7
 8005a64:	f7ff fbb2 	bl	80051cc <memcpy>
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	f7ff fbbc 	bl	80051e8 <_free_r>
 8005a70:	e7e1      	b.n	8005a36 <_realloc_r+0x1e>
 8005a72:	4635      	mov	r5, r6
 8005a74:	e7df      	b.n	8005a36 <_realloc_r+0x1e>

08005a76 <_malloc_usable_size_r>:
 8005a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a7a:	1f18      	subs	r0, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bfbc      	itt	lt
 8005a80:	580b      	ldrlt	r3, [r1, r0]
 8005a82:	18c0      	addlt	r0, r0, r3
 8005a84:	4770      	bx	lr
	...

08005a88 <_init>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	bf00      	nop
 8005a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8e:	bc08      	pop	{r3}
 8005a90:	469e      	mov	lr, r3
 8005a92:	4770      	bx	lr

08005a94 <_fini>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr
